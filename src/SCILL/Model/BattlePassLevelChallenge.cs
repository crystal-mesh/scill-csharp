/* 
 * SCILL API
 *
 * SCILL gives you the tools to activate, retain and grow your user base in your app or game by bringing you features well known in the gaming industry: Gamification. We take care of the services and technology involved so you can focus on your game and content.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@scillgame.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = SCILL.Client.SwaggerDateConverter;

namespace SCILL.Model
{
    /// <summary>
    /// BattlePassLevelChallenge
    /// </summary>
    [DataContract]
        public partial class BattlePassLevelChallenge :  IEquatable<BattlePassLevelChallenge>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BattlePassLevelChallenge" /> class.
        /// </summary>
        /// <param name="challengeGoal">The number of things a user needs to achieve until this challenge is completed..</param>
        /// <param name="name">The name in the local language indicated what to do..</param>
        /// <param name="currentChallengeAmount">The current number of things the user already has achieved. Use this in combination with challenge_goal to calculate progress and to render a nice progress bar/indicator..</param>
        /// <param name="completed">Indicates if this challenge is completed. Once all challenges in a BattlePassLevel object are completed, the current level reward can be claimed and the next level is unlocked..</param>
        /// <param name="active">Indicates if the challenge is active, thus tracking progress..</param>
        public BattlePassLevelChallenge(int? challengeGoal = default(int?), string name = default(string), int? currentChallengeAmount = default(int?), bool? completed = default(bool?), bool? active = default(bool?))
        {
            this.challenge_goal = challengeGoal;
            this.name = name;
            this.current_challenge_amount = currentChallengeAmount;
            this.completed = completed;
            this.active = active;
        }
        
        /// <summary>
        /// The number of things a user needs to achieve until this challenge is completed.
        /// </summary>
        /// <value>The number of things a user needs to achieve until this challenge is completed.</value>
        [DataMember(Name="challenge_goal", EmitDefaultValue=false)]
        public int? challenge_goal { get; set; }

        /// <summary>
        /// The name in the local language indicated what to do.
        /// </summary>
        /// <value>The name in the local language indicated what to do.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string name { get; set; }

        /// <summary>
        /// The current number of things the user already has achieved. Use this in combination with challenge_goal to calculate progress and to render a nice progress bar/indicator.
        /// </summary>
        /// <value>The current number of things the user already has achieved. Use this in combination with challenge_goal to calculate progress and to render a nice progress bar/indicator.</value>
        [DataMember(Name="current_challenge_amount", EmitDefaultValue=false)]
        public int? current_challenge_amount { get; set; }

        /// <summary>
        /// Indicates if this challenge is completed. Once all challenges in a BattlePassLevel object are completed, the current level reward can be claimed and the next level is unlocked.
        /// </summary>
        /// <value>Indicates if this challenge is completed. Once all challenges in a BattlePassLevel object are completed, the current level reward can be claimed and the next level is unlocked.</value>
        [DataMember(Name="completed", EmitDefaultValue=false)]
        public bool? completed { get; set; }

        /// <summary>
        /// Indicates if the challenge is active, thus tracking progress.
        /// </summary>
        /// <value>Indicates if the challenge is active, thus tracking progress.</value>
        [DataMember(Name="active", EmitDefaultValue=false)]
        public bool? active { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BattlePassLevelChallenge {\n");
            sb.Append("  challenge_goal: ").Append(challenge_goal).Append("\n");
            sb.Append("  name: ").Append(name).Append("\n");
            sb.Append("  current_challenge_amount: ").Append(current_challenge_amount).Append("\n");
            sb.Append("  completed: ").Append(completed).Append("\n");
            sb.Append("  active: ").Append(active).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BattlePassLevelChallenge);
        }

        /// <summary>
        /// Returns true if BattlePassLevelChallenge instances are equal
        /// </summary>
        /// <param name="input">Instance of BattlePassLevelChallenge to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BattlePassLevelChallenge input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.challenge_goal == input.challenge_goal ||
                    (this.challenge_goal != null &&
                    this.challenge_goal.Equals(input.challenge_goal))
                ) && 
                (
                    this.name == input.name ||
                    (this.name != null &&
                    this.name.Equals(input.name))
                ) && 
                (
                    this.current_challenge_amount == input.current_challenge_amount ||
                    (this.current_challenge_amount != null &&
                    this.current_challenge_amount.Equals(input.current_challenge_amount))
                ) && 
                (
                    this.completed == input.completed ||
                    (this.completed != null &&
                    this.completed.Equals(input.completed))
                ) && 
                (
                    this.active == input.active ||
                    (this.active != null &&
                    this.active.Equals(input.active))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.challenge_goal != null)
                    hashCode = hashCode * 59 + this.challenge_goal.GetHashCode();
                if (this.name != null)
                    hashCode = hashCode * 59 + this.name.GetHashCode();
                if (this.current_challenge_amount != null)
                    hashCode = hashCode * 59 + this.current_challenge_amount.GetHashCode();
                if (this.completed != null)
                    hashCode = hashCode * 59 + this.completed.GetHashCode();
                if (this.active != null)
                    hashCode = hashCode * 59 + this.active.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
