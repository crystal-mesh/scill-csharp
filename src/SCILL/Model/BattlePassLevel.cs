/* 
 * SCILL API
 *
 * SCILL gives you the tools to activate, retain and grow your user base in your app or game by bringing you features well known in the gaming industry: Gamification. We take care of the services and technology involved so you can focus on your game and content.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@scillgame.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = SCILL.Client.SwaggerDateConverter;

namespace SCILL.Model
{
    /// <summary>
    /// BattlePassLevel
    /// </summary>
    [DataContract]
        public partial class BattlePassLevel :  IEquatable<BattlePassLevel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BattlePassLevel" /> class.
        /// </summary>
        /// <param name="battlePassLevelId">Unique id of this BattlePassLevel object. (required).</param>
        /// <param name="levelPriority">The position of the level inside the stack of levels. Every level in this array will have this value incremented by 1. (required).</param>
        /// <param name="completed">Indicates if this level is completed, i.e. all challenges have been completed. (required).</param>
        /// <param name="canClaim">If all challenges in this level have been completed and can be claimed, this flag is true. I.e. show a “Claim Reward” button if this is true. (required).</param>
        /// <param name="unlocked">Levels need to be unlocked one after the other. You can decide if you already want to show users the challenges waiting behind a locked challenge or if you hide them to make it more exciting for the user to unlock the next level. (required).</param>
        /// <param name="claimed">Indicates if the reward for this level has already been claimed. Important: Users need to claim the reward to unlock the next level! Of course, you can also do that via REST-API automatically. (required).</param>
        /// <param name="rewardDescription">The description of the reward in the local language set in the request (see Setting Language). In the admin panel you can either create HTML content or plain text. (required).</param>
        /// <param name="rewardImage">The mobile sized image name of the reward. For example you can use reward_image and reward_image_desktop to build a srcset in HTML or use and size them manually where you need them. This can be freely set in the Admin Panel. Either indicates a local asset via name or you can also use a URL. (required).</param>
        /// <param name="rewardImageDesktop">The desktop sized image name of the reward. Either indicates a local asset via name or you can also use a URL. (required).</param>
        /// <param name="challenges">An array of BattlePassLevelChallenge objects. (required).</param>
        public BattlePassLevel(string battlePassLevelId = default(string), int? levelPriority = default(int?), bool? completed = default(bool?), bool? canClaim = default(bool?), bool? unlocked = default(bool?), bool? claimed = default(bool?), string rewardDescription = default(string), string rewardImage = default(string), string rewardImageDesktop = default(string), List<BattlePassLevelChallenge> challenges = default(List<BattlePassLevelChallenge>))
        {
            // to ensure "battlePassLevelId" is required (not null)
            if (battlePassLevelId == null)
            {
                throw new InvalidDataException("battlePassLevelId is a required property for BattlePassLevel and cannot be null");
            }
            else
            {
                this.battle_pass_level_id = battlePassLevelId;
            }
            // to ensure "levelPriority" is required (not null)
            if (levelPriority == null)
            {
                throw new InvalidDataException("levelPriority is a required property for BattlePassLevel and cannot be null");
            }
            else
            {
                this.level_priority = levelPriority;
            }
            // to ensure "completed" is required (not null)
            if (completed == null)
            {
                throw new InvalidDataException("completed is a required property for BattlePassLevel and cannot be null");
            }
            else
            {
                this.completed = completed;
            }
            // to ensure "canClaim" is required (not null)
            if (canClaim == null)
            {
                throw new InvalidDataException("canClaim is a required property for BattlePassLevel and cannot be null");
            }
            else
            {
                this.can_claim = canClaim;
            }
            // to ensure "unlocked" is required (not null)
            if (unlocked == null)
            {
                throw new InvalidDataException("unlocked is a required property for BattlePassLevel and cannot be null");
            }
            else
            {
                this.unlocked = unlocked;
            }
            // to ensure "claimed" is required (not null)
            if (claimed == null)
            {
                throw new InvalidDataException("claimed is a required property for BattlePassLevel and cannot be null");
            }
            else
            {
                this.claimed = claimed;
            }
            // to ensure "rewardDescription" is required (not null)
            if (rewardDescription == null)
            {
                throw new InvalidDataException("rewardDescription is a required property for BattlePassLevel and cannot be null");
            }
            else
            {
                this.reward_description = rewardDescription;
            }
            // to ensure "rewardImage" is required (not null)
            if (rewardImage == null)
            {
                throw new InvalidDataException("rewardImage is a required property for BattlePassLevel and cannot be null");
            }
            else
            {
                this.reward_image = rewardImage;
            }
            // to ensure "rewardImageDesktop" is required (not null)
            if (rewardImageDesktop == null)
            {
                throw new InvalidDataException("rewardImageDesktop is a required property for BattlePassLevel and cannot be null");
            }
            else
            {
                this.reward_image_desktop = rewardImageDesktop;
            }
            // to ensure "challenges" is required (not null)
            if (challenges == null)
            {
                throw new InvalidDataException("challenges is a required property for BattlePassLevel and cannot be null");
            }
            else
            {
                this.challenges = challenges;
            }
        }
        
        /// <summary>
        /// Unique id of this BattlePassLevel object.
        /// </summary>
        /// <value>Unique id of this BattlePassLevel object.</value>
        [DataMember(Name="battle_pass_level_id", EmitDefaultValue=false)]
        public string battle_pass_level_id { get; set; }

        /// <summary>
        /// The position of the level inside the stack of levels. Every level in this array will have this value incremented by 1.
        /// </summary>
        /// <value>The position of the level inside the stack of levels. Every level in this array will have this value incremented by 1.</value>
        [DataMember(Name="level_priority", EmitDefaultValue=false)]
        public int? level_priority { get; set; }

        /// <summary>
        /// Indicates if this level is completed, i.e. all challenges have been completed.
        /// </summary>
        /// <value>Indicates if this level is completed, i.e. all challenges have been completed.</value>
        [DataMember(Name="completed", EmitDefaultValue=false)]
        public bool? completed { get; set; }

        /// <summary>
        /// If all challenges in this level have been completed and can be claimed, this flag is true. I.e. show a “Claim Reward” button if this is true.
        /// </summary>
        /// <value>If all challenges in this level have been completed and can be claimed, this flag is true. I.e. show a “Claim Reward” button if this is true.</value>
        [DataMember(Name="can_claim", EmitDefaultValue=false)]
        public bool? can_claim { get; set; }

        /// <summary>
        /// Levels need to be unlocked one after the other. You can decide if you already want to show users the challenges waiting behind a locked challenge or if you hide them to make it more exciting for the user to unlock the next level.
        /// </summary>
        /// <value>Levels need to be unlocked one after the other. You can decide if you already want to show users the challenges waiting behind a locked challenge or if you hide them to make it more exciting for the user to unlock the next level.</value>
        [DataMember(Name="unlocked", EmitDefaultValue=false)]
        public bool? unlocked { get; set; }

        /// <summary>
        /// Indicates if the reward for this level has already been claimed. Important: Users need to claim the reward to unlock the next level! Of course, you can also do that via REST-API automatically.
        /// </summary>
        /// <value>Indicates if the reward for this level has already been claimed. Important: Users need to claim the reward to unlock the next level! Of course, you can also do that via REST-API automatically.</value>
        [DataMember(Name="claimed", EmitDefaultValue=false)]
        public bool? claimed { get; set; }

        /// <summary>
        /// The description of the reward in the local language set in the request (see Setting Language). In the admin panel you can either create HTML content or plain text.
        /// </summary>
        /// <value>The description of the reward in the local language set in the request (see Setting Language). In the admin panel you can either create HTML content or plain text.</value>
        [DataMember(Name="reward_description", EmitDefaultValue=false)]
        public string reward_description { get; set; }

        /// <summary>
        /// The mobile sized image name of the reward. For example you can use reward_image and reward_image_desktop to build a srcset in HTML or use and size them manually where you need them. This can be freely set in the Admin Panel. Either indicates a local asset via name or you can also use a URL.
        /// </summary>
        /// <value>The mobile sized image name of the reward. For example you can use reward_image and reward_image_desktop to build a srcset in HTML or use and size them manually where you need them. This can be freely set in the Admin Panel. Either indicates a local asset via name or you can also use a URL.</value>
        [DataMember(Name="reward_image", EmitDefaultValue=false)]
        public string reward_image { get; set; }

        /// <summary>
        /// The desktop sized image name of the reward. Either indicates a local asset via name or you can also use a URL.
        /// </summary>
        /// <value>The desktop sized image name of the reward. Either indicates a local asset via name or you can also use a URL.</value>
        [DataMember(Name="reward_image_desktop", EmitDefaultValue=false)]
        public string reward_image_desktop { get; set; }

        /// <summary>
        /// An array of BattlePassLevelChallenge objects.
        /// </summary>
        /// <value>An array of BattlePassLevelChallenge objects.</value>
        [DataMember(Name="challenges", EmitDefaultValue=false)]
        public List<BattlePassLevelChallenge> challenges { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BattlePassLevel {\n");
            sb.Append("  battle_pass_level_id: ").Append(battle_pass_level_id).Append("\n");
            sb.Append("  level_priority: ").Append(level_priority).Append("\n");
            sb.Append("  completed: ").Append(completed).Append("\n");
            sb.Append("  can_claim: ").Append(can_claim).Append("\n");
            sb.Append("  unlocked: ").Append(unlocked).Append("\n");
            sb.Append("  claimed: ").Append(claimed).Append("\n");
            sb.Append("  reward_description: ").Append(reward_description).Append("\n");
            sb.Append("  reward_image: ").Append(reward_image).Append("\n");
            sb.Append("  reward_image_desktop: ").Append(reward_image_desktop).Append("\n");
            sb.Append("  challenges: ").Append(challenges).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BattlePassLevel);
        }

        /// <summary>
        /// Returns true if BattlePassLevel instances are equal
        /// </summary>
        /// <param name="input">Instance of BattlePassLevel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BattlePassLevel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.battle_pass_level_id == input.battle_pass_level_id ||
                    (this.battle_pass_level_id != null &&
                    this.battle_pass_level_id.Equals(input.battle_pass_level_id))
                ) && 
                (
                    this.level_priority == input.level_priority ||
                    (this.level_priority != null &&
                    this.level_priority.Equals(input.level_priority))
                ) && 
                (
                    this.completed == input.completed ||
                    (this.completed != null &&
                    this.completed.Equals(input.completed))
                ) && 
                (
                    this.can_claim == input.can_claim ||
                    (this.can_claim != null &&
                    this.can_claim.Equals(input.can_claim))
                ) && 
                (
                    this.unlocked == input.unlocked ||
                    (this.unlocked != null &&
                    this.unlocked.Equals(input.unlocked))
                ) && 
                (
                    this.claimed == input.claimed ||
                    (this.claimed != null &&
                    this.claimed.Equals(input.claimed))
                ) && 
                (
                    this.reward_description == input.reward_description ||
                    (this.reward_description != null &&
                    this.reward_description.Equals(input.reward_description))
                ) && 
                (
                    this.reward_image == input.reward_image ||
                    (this.reward_image != null &&
                    this.reward_image.Equals(input.reward_image))
                ) && 
                (
                    this.reward_image_desktop == input.reward_image_desktop ||
                    (this.reward_image_desktop != null &&
                    this.reward_image_desktop.Equals(input.reward_image_desktop))
                ) && 
                (
                    this.challenges == input.challenges ||
                    this.challenges != null &&
                    input.challenges != null &&
                    this.challenges.SequenceEqual(input.challenges)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.battle_pass_level_id != null)
                    hashCode = hashCode * 59 + this.battle_pass_level_id.GetHashCode();
                if (this.level_priority != null)
                    hashCode = hashCode * 59 + this.level_priority.GetHashCode();
                if (this.completed != null)
                    hashCode = hashCode * 59 + this.completed.GetHashCode();
                if (this.can_claim != null)
                    hashCode = hashCode * 59 + this.can_claim.GetHashCode();
                if (this.unlocked != null)
                    hashCode = hashCode * 59 + this.unlocked.GetHashCode();
                if (this.claimed != null)
                    hashCode = hashCode * 59 + this.claimed.GetHashCode();
                if (this.reward_description != null)
                    hashCode = hashCode * 59 + this.reward_description.GetHashCode();
                if (this.reward_image != null)
                    hashCode = hashCode * 59 + this.reward_image.GetHashCode();
                if (this.reward_image_desktop != null)
                    hashCode = hashCode * 59 + this.reward_image_desktop.GetHashCode();
                if (this.challenges != null)
                    hashCode = hashCode * 59 + this.challenges.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
