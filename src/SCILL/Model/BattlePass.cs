/* 
 * SCILL API
 *
 * SCILL gives you the tools to activate, retain and grow your user base in your app or game by bringing you features well known in the gaming industry: Gamification. We take care of the services and technology involved so you can focus on your game and content.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@scillgame.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = SCILL.Client.SwaggerDateConverter;

namespace SCILL.Model
{
    /// <summary>
    /// BattlePass
    /// </summary>
    [DataContract]
        public partial class BattlePass :  IEquatable<BattlePass>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BattlePass" /> class.
        /// </summary>
        /// <param name="battlePassId">The unique id of this battle pass. (required).</param>
        /// <param name="packageSku">If you want to sell Battle Passes you can use this field to trigger in-app purchase products within your mobile app. You can set this value in the Admin Panel. (required).</param>
        /// <param name="name">The name of the Battle Pass in the local language set in the request (see Setting Language). In the admin panel you can either create HTML content or plain text. (required).</param>
        /// <param name="description">The description of the Battle Pass in the local language set in the request (see Setting Language). In the admin panel you can either create HTML content or plain text. (required).</param>
        /// <param name="truncatedDescription">A short description in the local language you can use to teaser battle passes or implement “expand for more” functionality. (required).</param>
        /// <param name="image">The mobile sized image name. For example you can use image and image_desktop to build a srcset in HTML or use them and size manually where you need them. (required).</param>
        /// <param name="imageDesktop">The desktop sized image name or URL (required).</param>
        /// <param name="battlePassStartDate">The date (in iso format) when the Battle Pass starts. Tracking begins once this date is passed. (required).</param>
        /// <param name="battlePassEndDate">The date (in iso format) when the Battle Pass ends. Tracking stops once the end is reached and users will not be able to progress further than what they have achieved up to that point. (required).</param>
        /// <param name="readMoreLink">If the Battle Pass costs “money” you may want to route the user to a web site/page, where they can learn more about this battle pass. You can also use this field to route the user inside your application by providing a path or whatever works for you. (required).</param>
        /// <param name="pageId">Another field you can set in the admin panel. SCILL Play uses this field to show a specific page by name. (required).</param>
        /// <param name="battlePassCompleted">This option is not available in all requests. It indicates if the user has completed this Battle Pass..</param>
        /// <param name="packageValueEur">Price for the Battle Pass. You can set this field in the Admin Panel. Often it makes sense to use Pricing functionality of in-app purchase APIs in the relevant eco system (Steam, AppStore, Google Play Store) to request the price, but if you don’t have access to that, you can use this field..</param>
        /// <param name="purchasedAt">The date in iso format when the user purchased/unlocked this Battle Pass..</param>
        /// <param name="canPurchaseWithMoney">Indicates that this Battle Pass can be purchased via in-app purchase. This can be set in the Admin Panel..</param>
        /// <param name="canPurchaseWithCoins">Indicates that this Battle Pass can be purchased with SCILL Coins. This can be set in the Admin Panel..</param>
        /// <param name="levels">An array of BattlePassLevel objects..</param>
        public BattlePass(string battlePassId = default(string), string packageSku = default(string), string name = default(string), string description = default(string), string truncatedDescription = default(string), string image = default(string), string imageDesktop = default(string), string battlePassStartDate = default(string), string battlePassEndDate = default(string), string readMoreLink = default(string), string pageId = default(string), bool? battlePassCompleted = default(bool?), string packageValueEur = default(string), string purchasedAt = default(string), bool? canPurchaseWithMoney = default(bool?), bool? canPurchaseWithCoins = default(bool?), List<BattlePassLevel> levels = default(List<BattlePassLevel>))
        {
            // to ensure "battlePassId" is required (not null)
            if (battlePassId == null)
            {
                throw new InvalidDataException("battlePassId is a required property for BattlePass and cannot be null");
            }
            else
            {
                this.battle_pass_id = battlePassId;
            }
            // to ensure "packageSku" is required (not null)
            if (packageSku == null)
            {
                throw new InvalidDataException("packageSku is a required property for BattlePass and cannot be null");
            }
            else
            {
                this.package_sku = packageSku;
            }
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for BattlePass and cannot be null");
            }
            else
            {
                this.name = name;
            }
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new InvalidDataException("description is a required property for BattlePass and cannot be null");
            }
            else
            {
                this.description = description;
            }
            // to ensure "truncatedDescription" is required (not null)
            if (truncatedDescription == null)
            {
                throw new InvalidDataException("truncatedDescription is a required property for BattlePass and cannot be null");
            }
            else
            {
                this.truncated_description = truncatedDescription;
            }
            // to ensure "image" is required (not null)
            if (image == null)
            {
                throw new InvalidDataException("image is a required property for BattlePass and cannot be null");
            }
            else
            {
                this.image = image;
            }
            // to ensure "imageDesktop" is required (not null)
            if (imageDesktop == null)
            {
                throw new InvalidDataException("imageDesktop is a required property for BattlePass and cannot be null");
            }
            else
            {
                this.image_desktop = imageDesktop;
            }
            // to ensure "battlePassStartDate" is required (not null)
            if (battlePassStartDate == null)
            {
                throw new InvalidDataException("battlePassStartDate is a required property for BattlePass and cannot be null");
            }
            else
            {
                this.battle_pass_start_date = battlePassStartDate;
            }
            // to ensure "battlePassEndDate" is required (not null)
            if (battlePassEndDate == null)
            {
                throw new InvalidDataException("battlePassEndDate is a required property for BattlePass and cannot be null");
            }
            else
            {
                this.battle_pass_end_date = battlePassEndDate;
            }
            // to ensure "readMoreLink" is required (not null)
            if (readMoreLink == null)
            {
                throw new InvalidDataException("readMoreLink is a required property for BattlePass and cannot be null");
            }
            else
            {
                this.read_more_link = readMoreLink;
            }
            // to ensure "pageId" is required (not null)
            if (pageId == null)
            {
                throw new InvalidDataException("pageId is a required property for BattlePass and cannot be null");
            }
            else
            {
                this.page_id = pageId;
            }
            this.battle_pass_completed = battlePassCompleted;
            this.package_value_eur = packageValueEur;
            this.purchased_at = purchasedAt;
            this.can_purchase_with_money = canPurchaseWithMoney;
            this.can_purchase_with_coins = canPurchaseWithCoins;
            this.levels = levels;
        }
        
        /// <summary>
        /// The unique id of this battle pass.
        /// </summary>
        /// <value>The unique id of this battle pass.</value>
        [DataMember(Name="battle_pass_id", EmitDefaultValue=false)]
        public string battle_pass_id { get; set; }

        /// <summary>
        /// If you want to sell Battle Passes you can use this field to trigger in-app purchase products within your mobile app. You can set this value in the Admin Panel.
        /// </summary>
        /// <value>If you want to sell Battle Passes you can use this field to trigger in-app purchase products within your mobile app. You can set this value in the Admin Panel.</value>
        [DataMember(Name="package_sku", EmitDefaultValue=false)]
        public string package_sku { get; set; }

        /// <summary>
        /// The name of the Battle Pass in the local language set in the request (see Setting Language). In the admin panel you can either create HTML content or plain text.
        /// </summary>
        /// <value>The name of the Battle Pass in the local language set in the request (see Setting Language). In the admin panel you can either create HTML content or plain text.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string name { get; set; }

        /// <summary>
        /// The description of the Battle Pass in the local language set in the request (see Setting Language). In the admin panel you can either create HTML content or plain text.
        /// </summary>
        /// <value>The description of the Battle Pass in the local language set in the request (see Setting Language). In the admin panel you can either create HTML content or plain text.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string description { get; set; }

        /// <summary>
        /// A short description in the local language you can use to teaser battle passes or implement “expand for more” functionality.
        /// </summary>
        /// <value>A short description in the local language you can use to teaser battle passes or implement “expand for more” functionality.</value>
        [DataMember(Name="truncated_description", EmitDefaultValue=false)]
        public string truncated_description { get; set; }

        /// <summary>
        /// The mobile sized image name. For example you can use image and image_desktop to build a srcset in HTML or use them and size manually where you need them.
        /// </summary>
        /// <value>The mobile sized image name. For example you can use image and image_desktop to build a srcset in HTML or use them and size manually where you need them.</value>
        [DataMember(Name="image", EmitDefaultValue=false)]
        public string image { get; set; }

        /// <summary>
        /// The desktop sized image name or URL
        /// </summary>
        /// <value>The desktop sized image name or URL</value>
        [DataMember(Name="image_desktop", EmitDefaultValue=false)]
        public string image_desktop { get; set; }

        /// <summary>
        /// The date (in iso format) when the Battle Pass starts. Tracking begins once this date is passed.
        /// </summary>
        /// <value>The date (in iso format) when the Battle Pass starts. Tracking begins once this date is passed.</value>
        [DataMember(Name="battle_pass_start_date", EmitDefaultValue=false)]
        public string battle_pass_start_date { get; set; }

        /// <summary>
        /// The date (in iso format) when the Battle Pass ends. Tracking stops once the end is reached and users will not be able to progress further than what they have achieved up to that point.
        /// </summary>
        /// <value>The date (in iso format) when the Battle Pass ends. Tracking stops once the end is reached and users will not be able to progress further than what they have achieved up to that point.</value>
        [DataMember(Name="battle_pass_end_date", EmitDefaultValue=false)]
        public string battle_pass_end_date { get; set; }

        /// <summary>
        /// If the Battle Pass costs “money” you may want to route the user to a web site/page, where they can learn more about this battle pass. You can also use this field to route the user inside your application by providing a path or whatever works for you.
        /// </summary>
        /// <value>If the Battle Pass costs “money” you may want to route the user to a web site/page, where they can learn more about this battle pass. You can also use this field to route the user inside your application by providing a path or whatever works for you.</value>
        [DataMember(Name="read_more_link", EmitDefaultValue=false)]
        public string read_more_link { get; set; }

        /// <summary>
        /// Another field you can set in the admin panel. SCILL Play uses this field to show a specific page by name.
        /// </summary>
        /// <value>Another field you can set in the admin panel. SCILL Play uses this field to show a specific page by name.</value>
        [DataMember(Name="page_id", EmitDefaultValue=false)]
        public string page_id { get; set; }

        /// <summary>
        /// This option is not available in all requests. It indicates if the user has completed this Battle Pass.
        /// </summary>
        /// <value>This option is not available in all requests. It indicates if the user has completed this Battle Pass.</value>
        [DataMember(Name="battle_pass_completed", EmitDefaultValue=false)]
        public bool? battle_pass_completed { get; set; }

        /// <summary>
        /// Price for the Battle Pass. You can set this field in the Admin Panel. Often it makes sense to use Pricing functionality of in-app purchase APIs in the relevant eco system (Steam, AppStore, Google Play Store) to request the price, but if you don’t have access to that, you can use this field.
        /// </summary>
        /// <value>Price for the Battle Pass. You can set this field in the Admin Panel. Often it makes sense to use Pricing functionality of in-app purchase APIs in the relevant eco system (Steam, AppStore, Google Play Store) to request the price, but if you don’t have access to that, you can use this field.</value>
        [DataMember(Name="package_value_eur", EmitDefaultValue=false)]
        public string package_value_eur { get; set; }

        /// <summary>
        /// The date in iso format when the user purchased/unlocked this Battle Pass.
        /// </summary>
        /// <value>The date in iso format when the user purchased/unlocked this Battle Pass.</value>
        [DataMember(Name="purchased_at", EmitDefaultValue=false)]
        public string purchased_at { get; set; }

        /// <summary>
        /// Indicates that this Battle Pass can be purchased via in-app purchase. This can be set in the Admin Panel.
        /// </summary>
        /// <value>Indicates that this Battle Pass can be purchased via in-app purchase. This can be set in the Admin Panel.</value>
        [DataMember(Name="can_purchase_with_money", EmitDefaultValue=false)]
        public bool? can_purchase_with_money { get; set; }

        /// <summary>
        /// Indicates that this Battle Pass can be purchased with SCILL Coins. This can be set in the Admin Panel.
        /// </summary>
        /// <value>Indicates that this Battle Pass can be purchased with SCILL Coins. This can be set in the Admin Panel.</value>
        [DataMember(Name="can_purchase_with_coins", EmitDefaultValue=false)]
        public bool? can_purchase_with_coins { get; set; }

        /// <summary>
        /// An array of BattlePassLevel objects.
        /// </summary>
        /// <value>An array of BattlePassLevel objects.</value>
        [DataMember(Name="levels", EmitDefaultValue=false)]
        public List<BattlePassLevel> levels { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BattlePass {\n");
            sb.Append("  battle_pass_id: ").Append(battle_pass_id).Append("\n");
            sb.Append("  package_sku: ").Append(package_sku).Append("\n");
            sb.Append("  name: ").Append(name).Append("\n");
            sb.Append("  description: ").Append(description).Append("\n");
            sb.Append("  truncated_description: ").Append(truncated_description).Append("\n");
            sb.Append("  image: ").Append(image).Append("\n");
            sb.Append("  image_desktop: ").Append(image_desktop).Append("\n");
            sb.Append("  battle_pass_start_date: ").Append(battle_pass_start_date).Append("\n");
            sb.Append("  battle_pass_end_date: ").Append(battle_pass_end_date).Append("\n");
            sb.Append("  read_more_link: ").Append(read_more_link).Append("\n");
            sb.Append("  page_id: ").Append(page_id).Append("\n");
            sb.Append("  battle_pass_completed: ").Append(battle_pass_completed).Append("\n");
            sb.Append("  package_value_eur: ").Append(package_value_eur).Append("\n");
            sb.Append("  purchased_at: ").Append(purchased_at).Append("\n");
            sb.Append("  can_purchase_with_money: ").Append(can_purchase_with_money).Append("\n");
            sb.Append("  can_purchase_with_coins: ").Append(can_purchase_with_coins).Append("\n");
            sb.Append("  levels: ").Append(levels).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BattlePass);
        }

        /// <summary>
        /// Returns true if BattlePass instances are equal
        /// </summary>
        /// <param name="input">Instance of BattlePass to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BattlePass input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.battle_pass_id == input.battle_pass_id ||
                    (this.battle_pass_id != null &&
                    this.battle_pass_id.Equals(input.battle_pass_id))
                ) && 
                (
                    this.package_sku == input.package_sku ||
                    (this.package_sku != null &&
                    this.package_sku.Equals(input.package_sku))
                ) && 
                (
                    this.name == input.name ||
                    (this.name != null &&
                    this.name.Equals(input.name))
                ) && 
                (
                    this.description == input.description ||
                    (this.description != null &&
                    this.description.Equals(input.description))
                ) && 
                (
                    this.truncated_description == input.truncated_description ||
                    (this.truncated_description != null &&
                    this.truncated_description.Equals(input.truncated_description))
                ) && 
                (
                    this.image == input.image ||
                    (this.image != null &&
                    this.image.Equals(input.image))
                ) && 
                (
                    this.image_desktop == input.image_desktop ||
                    (this.image_desktop != null &&
                    this.image_desktop.Equals(input.image_desktop))
                ) && 
                (
                    this.battle_pass_start_date == input.battle_pass_start_date ||
                    (this.battle_pass_start_date != null &&
                    this.battle_pass_start_date.Equals(input.battle_pass_start_date))
                ) && 
                (
                    this.battle_pass_end_date == input.battle_pass_end_date ||
                    (this.battle_pass_end_date != null &&
                    this.battle_pass_end_date.Equals(input.battle_pass_end_date))
                ) && 
                (
                    this.read_more_link == input.read_more_link ||
                    (this.read_more_link != null &&
                    this.read_more_link.Equals(input.read_more_link))
                ) && 
                (
                    this.page_id == input.page_id ||
                    (this.page_id != null &&
                    this.page_id.Equals(input.page_id))
                ) && 
                (
                    this.battle_pass_completed == input.battle_pass_completed ||
                    (this.battle_pass_completed != null &&
                    this.battle_pass_completed.Equals(input.battle_pass_completed))
                ) && 
                (
                    this.package_value_eur == input.package_value_eur ||
                    (this.package_value_eur != null &&
                    this.package_value_eur.Equals(input.package_value_eur))
                ) && 
                (
                    this.purchased_at == input.purchased_at ||
                    (this.purchased_at != null &&
                    this.purchased_at.Equals(input.purchased_at))
                ) && 
                (
                    this.can_purchase_with_money == input.can_purchase_with_money ||
                    (this.can_purchase_with_money != null &&
                    this.can_purchase_with_money.Equals(input.can_purchase_with_money))
                ) && 
                (
                    this.can_purchase_with_coins == input.can_purchase_with_coins ||
                    (this.can_purchase_with_coins != null &&
                    this.can_purchase_with_coins.Equals(input.can_purchase_with_coins))
                ) && 
                (
                    this.levels == input.levels ||
                    this.levels != null &&
                    input.levels != null &&
                    this.levels.SequenceEqual(input.levels)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.battle_pass_id != null)
                    hashCode = hashCode * 59 + this.battle_pass_id.GetHashCode();
                if (this.package_sku != null)
                    hashCode = hashCode * 59 + this.package_sku.GetHashCode();
                if (this.name != null)
                    hashCode = hashCode * 59 + this.name.GetHashCode();
                if (this.description != null)
                    hashCode = hashCode * 59 + this.description.GetHashCode();
                if (this.truncated_description != null)
                    hashCode = hashCode * 59 + this.truncated_description.GetHashCode();
                if (this.image != null)
                    hashCode = hashCode * 59 + this.image.GetHashCode();
                if (this.image_desktop != null)
                    hashCode = hashCode * 59 + this.image_desktop.GetHashCode();
                if (this.battle_pass_start_date != null)
                    hashCode = hashCode * 59 + this.battle_pass_start_date.GetHashCode();
                if (this.battle_pass_end_date != null)
                    hashCode = hashCode * 59 + this.battle_pass_end_date.GetHashCode();
                if (this.read_more_link != null)
                    hashCode = hashCode * 59 + this.read_more_link.GetHashCode();
                if (this.page_id != null)
                    hashCode = hashCode * 59 + this.page_id.GetHashCode();
                if (this.battle_pass_completed != null)
                    hashCode = hashCode * 59 + this.battle_pass_completed.GetHashCode();
                if (this.package_value_eur != null)
                    hashCode = hashCode * 59 + this.package_value_eur.GetHashCode();
                if (this.purchased_at != null)
                    hashCode = hashCode * 59 + this.purchased_at.GetHashCode();
                if (this.can_purchase_with_money != null)
                    hashCode = hashCode * 59 + this.can_purchase_with_money.GetHashCode();
                if (this.can_purchase_with_coins != null)
                    hashCode = hashCode * 59 + this.can_purchase_with_coins.GetHashCode();
                if (this.levels != null)
                    hashCode = hashCode * 59 + this.levels.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
