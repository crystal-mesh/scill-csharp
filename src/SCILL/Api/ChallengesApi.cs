/* 
 * SCILL API
 *
 * SCILL gives you the tools to activate, retain and grow your user base in your app or game by bringing you features well known in the gaming industry: Gamification. We take care of the services and technology involved so you can focus on your game and content.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@scillgame.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using SCILL.Client;
using SCILL.Model;

namespace SCILL.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IChallengesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Activate a personal challenges
        /// </summary>
        /// <remarks>
        /// Activate a personal challenge by product id and user challenge id
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="challengeId">The challenge id (see challenge_id of Challenge object)</param>
        /// <returns>ActionResponse</returns>
        ActionResponse ActivatePersonalChallenge (string appId, string challengeId);

        /// <summary>
        /// Activate a personal challenges
        /// </summary>
        /// <remarks>
        /// Activate a personal challenge by product id and user challenge id
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="challengeId">The challenge id (see challenge_id of Challenge object)</param>
        /// <returns>ApiResponse of ActionResponse</returns>
        ApiResponse<ActionResponse> ActivatePersonalChallengeWithHttpInfo (string appId, string challengeId);
        /// <summary>
        /// Cancel an active personal challenges
        /// </summary>
        /// <remarks>
        /// Cancel an active personal challenge by product id and user challenge id
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="challengeId">The challenge id (see challenge_id of Challenge object)</param>
        /// <returns>ActionResponse</returns>
        ActionResponse CancelPersonalChallenge (string appId, string challengeId);

        /// <summary>
        /// Cancel an active personal challenges
        /// </summary>
        /// <remarks>
        /// Cancel an active personal challenge by product id and user challenge id
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="challengeId">The challenge id (see challenge_id of Challenge object)</param>
        /// <returns>ApiResponse of ActionResponse</returns>
        ApiResponse<ActionResponse> CancelPersonalChallengeWithHttpInfo (string appId, string challengeId);
        /// <summary>
        /// Claim the reward of a finished personal challenge
        /// </summary>
        /// <remarks>
        /// Claim the reward of a finished personal challenge by product id and user challenge id
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="challengeId">The challenge id (see challenge_id of Challenge object)</param>
        /// <returns>ActionResponse</returns>
        ActionResponse ClaimPersonalChallengeReward (string appId, string challengeId);

        /// <summary>
        /// Claim the reward of a finished personal challenge
        /// </summary>
        /// <remarks>
        /// Claim the reward of a finished personal challenge by product id and user challenge id
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="challengeId">The challenge id (see challenge_id of Challenge object)</param>
        /// <returns>ApiResponse of ActionResponse</returns>
        ApiResponse<ActionResponse> ClaimPersonalChallengeRewardWithHttpInfo (string appId, string challengeId);
        /// <summary>
        /// Get an access token for the Websockets server notifying of updates in real time
        /// </summary>
        /// <remarks>
        /// Get an access token for the Websockets server notifying of updates in real time
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SocketToken</returns>
        SocketToken GenerateWebsocketAccessToken ();

        /// <summary>
        /// Get an access token for the Websockets server notifying of updates in real time
        /// </summary>
        /// <remarks>
        /// Get an access token for the Websockets server notifying of updates in real time
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SocketToken</returns>
        ApiResponse<SocketToken> GenerateWebsocketAccessTokenWithHttpInfo ();
        /// <summary>
        /// Get active personal challenges
        /// </summary>
        /// <remarks>
        /// Get active personal challenges organized in categories
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <returns>List&lt;ChallengeCategory&gt;</returns>
        List<ChallengeCategory> GetActivePersonalChallenges (string appId);

        /// <summary>
        /// Get active personal challenges
        /// </summary>
        /// <remarks>
        /// Get active personal challenges organized in categories
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <returns>ApiResponse of List&lt;ChallengeCategory&gt;</returns>
        ApiResponse<List<ChallengeCategory>> GetActivePersonalChallengesWithHttpInfo (string appId);
        /// <summary>
        /// Get personal challenge by id
        /// </summary>
        /// <remarks>
        /// Get personal challenges organized in categories
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="challengeId">The challenge id (see challenge_id of Challenge object)</param>
        /// <returns>Challenge</returns>
        Challenge GetPersonalChallengeById (string appId, string challengeId);

        /// <summary>
        /// Get personal challenge by id
        /// </summary>
        /// <remarks>
        /// Get personal challenges organized in categories
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="challengeId">The challenge id (see challenge_id of Challenge object)</param>
        /// <returns>ApiResponse of Challenge</returns>
        ApiResponse<Challenge> GetPersonalChallengeByIdWithHttpInfo (string appId, string challengeId);
        /// <summary>
        /// Get personal challenges
        /// </summary>
        /// <remarks>
        /// Get personal challenges organized in categories
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <returns>List&lt;ChallengeCategory&gt;</returns>
        List<ChallengeCategory> GetPersonalChallenges (string appId);

        /// <summary>
        /// Get personal challenges
        /// </summary>
        /// <remarks>
        /// Get personal challenges organized in categories
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <returns>ApiResponse of List&lt;ChallengeCategory&gt;</returns>
        ApiResponse<List<ChallengeCategory>> GetPersonalChallengesWithHttpInfo (string appId);
        /// <summary>
        /// Unlock a personal challenges
        /// </summary>
        /// <remarks>
        /// Unlock a personal challenge by product id and challenge id
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="challengeId">The challenge id (see challenge_id of Challenge object)</param>
        /// <returns>ActionResponse</returns>
        ActionResponse UnlockPersonalChallenge (string appId, string challengeId);

        /// <summary>
        /// Unlock a personal challenges
        /// </summary>
        /// <remarks>
        /// Unlock a personal challenge by product id and challenge id
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="challengeId">The challenge id (see challenge_id of Challenge object)</param>
        /// <returns>ApiResponse of ActionResponse</returns>
        ApiResponse<ActionResponse> UnlockPersonalChallengeWithHttpInfo (string appId, string challengeId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Activate a personal challenges
        /// </summary>
        /// <remarks>
        /// Activate a personal challenge by product id and user challenge id
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="challengeId">The challenge id (see challenge_id of Challenge object)</param>
        /// <returns>Task of ActionResponse</returns>
        System.Threading.Tasks.Task<ActionResponse> ActivatePersonalChallengeAsync (string appId, string challengeId);

        /// <summary>
        /// Activate a personal challenges
        /// </summary>
        /// <remarks>
        /// Activate a personal challenge by product id and user challenge id
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="challengeId">The challenge id (see challenge_id of Challenge object)</param>
        /// <returns>Task of ApiResponse (ActionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ActionResponse>> ActivatePersonalChallengeAsyncWithHttpInfo (string appId, string challengeId);
        /// <summary>
        /// Cancel an active personal challenges
        /// </summary>
        /// <remarks>
        /// Cancel an active personal challenge by product id and user challenge id
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="challengeId">The challenge id (see challenge_id of Challenge object)</param>
        /// <returns>Task of ActionResponse</returns>
        System.Threading.Tasks.Task<ActionResponse> CancelPersonalChallengeAsync (string appId, string challengeId);

        /// <summary>
        /// Cancel an active personal challenges
        /// </summary>
        /// <remarks>
        /// Cancel an active personal challenge by product id and user challenge id
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="challengeId">The challenge id (see challenge_id of Challenge object)</param>
        /// <returns>Task of ApiResponse (ActionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ActionResponse>> CancelPersonalChallengeAsyncWithHttpInfo (string appId, string challengeId);
        /// <summary>
        /// Claim the reward of a finished personal challenge
        /// </summary>
        /// <remarks>
        /// Claim the reward of a finished personal challenge by product id and user challenge id
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="challengeId">The challenge id (see challenge_id of Challenge object)</param>
        /// <returns>Task of ActionResponse</returns>
        System.Threading.Tasks.Task<ActionResponse> ClaimPersonalChallengeRewardAsync (string appId, string challengeId);

        /// <summary>
        /// Claim the reward of a finished personal challenge
        /// </summary>
        /// <remarks>
        /// Claim the reward of a finished personal challenge by product id and user challenge id
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="challengeId">The challenge id (see challenge_id of Challenge object)</param>
        /// <returns>Task of ApiResponse (ActionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ActionResponse>> ClaimPersonalChallengeRewardAsyncWithHttpInfo (string appId, string challengeId);
        /// <summary>
        /// Get an access token for the Websockets server notifying of updates in real time
        /// </summary>
        /// <remarks>
        /// Get an access token for the Websockets server notifying of updates in real time
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of SocketToken</returns>
        System.Threading.Tasks.Task<SocketToken> GenerateWebsocketAccessTokenAsync ();

        /// <summary>
        /// Get an access token for the Websockets server notifying of updates in real time
        /// </summary>
        /// <remarks>
        /// Get an access token for the Websockets server notifying of updates in real time
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (SocketToken)</returns>
        System.Threading.Tasks.Task<ApiResponse<SocketToken>> GenerateWebsocketAccessTokenAsyncWithHttpInfo ();
        /// <summary>
        /// Get active personal challenges
        /// </summary>
        /// <remarks>
        /// Get active personal challenges organized in categories
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <returns>Task of List&lt;ChallengeCategory&gt;</returns>
        System.Threading.Tasks.Task<List<ChallengeCategory>> GetActivePersonalChallengesAsync (string appId);

        /// <summary>
        /// Get active personal challenges
        /// </summary>
        /// <remarks>
        /// Get active personal challenges organized in categories
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <returns>Task of ApiResponse (List&lt;ChallengeCategory&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ChallengeCategory>>> GetActivePersonalChallengesAsyncWithHttpInfo (string appId);
        /// <summary>
        /// Get personal challenge by id
        /// </summary>
        /// <remarks>
        /// Get personal challenges organized in categories
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="challengeId">The challenge id (see challenge_id of Challenge object)</param>
        /// <returns>Task of Challenge</returns>
        System.Threading.Tasks.Task<Challenge> GetPersonalChallengeByIdAsync (string appId, string challengeId);

        /// <summary>
        /// Get personal challenge by id
        /// </summary>
        /// <remarks>
        /// Get personal challenges organized in categories
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="challengeId">The challenge id (see challenge_id of Challenge object)</param>
        /// <returns>Task of ApiResponse (Challenge)</returns>
        System.Threading.Tasks.Task<ApiResponse<Challenge>> GetPersonalChallengeByIdAsyncWithHttpInfo (string appId, string challengeId);
        /// <summary>
        /// Get personal challenges
        /// </summary>
        /// <remarks>
        /// Get personal challenges organized in categories
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <returns>Task of List&lt;ChallengeCategory&gt;</returns>
        System.Threading.Tasks.Task<List<ChallengeCategory>> GetPersonalChallengesAsync (string appId);

        /// <summary>
        /// Get personal challenges
        /// </summary>
        /// <remarks>
        /// Get personal challenges organized in categories
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <returns>Task of ApiResponse (List&lt;ChallengeCategory&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ChallengeCategory>>> GetPersonalChallengesAsyncWithHttpInfo (string appId);
        /// <summary>
        /// Unlock a personal challenges
        /// </summary>
        /// <remarks>
        /// Unlock a personal challenge by product id and challenge id
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="challengeId">The challenge id (see challenge_id of Challenge object)</param>
        /// <returns>Task of ActionResponse</returns>
        System.Threading.Tasks.Task<ActionResponse> UnlockPersonalChallengeAsync (string appId, string challengeId);

        /// <summary>
        /// Unlock a personal challenges
        /// </summary>
        /// <remarks>
        /// Unlock a personal challenge by product id and challenge id
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="challengeId">The challenge id (see challenge_id of Challenge object)</param>
        /// <returns>Task of ApiResponse (ActionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ActionResponse>> UnlockPersonalChallengeAsyncWithHttpInfo (string appId, string challengeId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class ChallengesApi : IChallengesApi
    {
        private SCILL.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ChallengesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ChallengesApi(String basePath)
        {
            this.Configuration = new SCILL.Client.Configuration { BasePath = basePath };

            ExceptionFactory = SCILL.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChallengesApi"/> class
        /// </summary>
        /// <returns></returns>
        public ChallengesApi()
        {
            this.Configuration = SCILL.Client.Configuration.Default;

            ExceptionFactory = SCILL.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChallengesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ChallengesApi(SCILL.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = SCILL.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = SCILL.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public SCILL.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public SCILL.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Activate a personal challenges Activate a personal challenge by product id and user challenge id
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="challengeId">The challenge id (see challenge_id of Challenge object)</param>
        /// <returns>ActionResponse</returns>
        public ActionResponse ActivatePersonalChallenge (string appId, string challengeId)
        {
             ApiResponse<ActionResponse> localVarResponse = ActivatePersonalChallengeWithHttpInfo(appId, challengeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Activate a personal challenges Activate a personal challenge by product id and user challenge id
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="challengeId">The challenge id (see challenge_id of Challenge object)</param>
        /// <returns>ApiResponse of ActionResponse</returns>
        public ApiResponse< ActionResponse > ActivatePersonalChallengeWithHttpInfo (string appId, string challengeId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling ChallengesApi->ActivatePersonalChallenge");
            // verify the required parameter 'challengeId' is set
            if (challengeId == null)
                throw new ApiException(400, "Missing required parameter 'challengeId' when calling ChallengesApi->ActivatePersonalChallenge");

            var localVarPath = "/api/v1/challenges/personal/activate/{appId}/{challengeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (challengeId != null) localVarPathParams.Add("challengeId", this.Configuration.ApiClient.ParameterToString(challengeId)); // path parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (oAuthNoScopes) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActivatePersonalChallenge", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ActionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ActionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ActionResponse)));
        }

        /// <summary>
        /// Activate a personal challenges Activate a personal challenge by product id and user challenge id
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="challengeId">The challenge id (see challenge_id of Challenge object)</param>
        /// <returns>Task of ActionResponse</returns>
        public async System.Threading.Tasks.Task<ActionResponse> ActivatePersonalChallengeAsync (string appId, string challengeId)
        {
             ApiResponse<ActionResponse> localVarResponse = await ActivatePersonalChallengeAsyncWithHttpInfo(appId, challengeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Activate a personal challenges Activate a personal challenge by product id and user challenge id
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="challengeId">The challenge id (see challenge_id of Challenge object)</param>
        /// <returns>Task of ApiResponse (ActionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ActionResponse>> ActivatePersonalChallengeAsyncWithHttpInfo (string appId, string challengeId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling ChallengesApi->ActivatePersonalChallenge");
            // verify the required parameter 'challengeId' is set
            if (challengeId == null)
                throw new ApiException(400, "Missing required parameter 'challengeId' when calling ChallengesApi->ActivatePersonalChallenge");

            var localVarPath = "/api/v1/challenges/personal/activate/{appId}/{challengeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (challengeId != null) localVarPathParams.Add("challengeId", this.Configuration.ApiClient.ParameterToString(challengeId)); // path parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (oAuthNoScopes) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActivatePersonalChallenge", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ActionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ActionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ActionResponse)));
        }

        /// <summary>
        /// Cancel an active personal challenges Cancel an active personal challenge by product id and user challenge id
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="challengeId">The challenge id (see challenge_id of Challenge object)</param>
        /// <returns>ActionResponse</returns>
        public ActionResponse CancelPersonalChallenge (string appId, string challengeId)
        {
             ApiResponse<ActionResponse> localVarResponse = CancelPersonalChallengeWithHttpInfo(appId, challengeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel an active personal challenges Cancel an active personal challenge by product id and user challenge id
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="challengeId">The challenge id (see challenge_id of Challenge object)</param>
        /// <returns>ApiResponse of ActionResponse</returns>
        public ApiResponse< ActionResponse > CancelPersonalChallengeWithHttpInfo (string appId, string challengeId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling ChallengesApi->CancelPersonalChallenge");
            // verify the required parameter 'challengeId' is set
            if (challengeId == null)
                throw new ApiException(400, "Missing required parameter 'challengeId' when calling ChallengesApi->CancelPersonalChallenge");

            var localVarPath = "/api/v1/challenges/personal/cancel/{appId}/{challengeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (challengeId != null) localVarPathParams.Add("challengeId", this.Configuration.ApiClient.ParameterToString(challengeId)); // path parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (oAuthNoScopes) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelPersonalChallenge", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ActionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ActionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ActionResponse)));
        }

        /// <summary>
        /// Cancel an active personal challenges Cancel an active personal challenge by product id and user challenge id
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="challengeId">The challenge id (see challenge_id of Challenge object)</param>
        /// <returns>Task of ActionResponse</returns>
        public async System.Threading.Tasks.Task<ActionResponse> CancelPersonalChallengeAsync (string appId, string challengeId)
        {
             ApiResponse<ActionResponse> localVarResponse = await CancelPersonalChallengeAsyncWithHttpInfo(appId, challengeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cancel an active personal challenges Cancel an active personal challenge by product id and user challenge id
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="challengeId">The challenge id (see challenge_id of Challenge object)</param>
        /// <returns>Task of ApiResponse (ActionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ActionResponse>> CancelPersonalChallengeAsyncWithHttpInfo (string appId, string challengeId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling ChallengesApi->CancelPersonalChallenge");
            // verify the required parameter 'challengeId' is set
            if (challengeId == null)
                throw new ApiException(400, "Missing required parameter 'challengeId' when calling ChallengesApi->CancelPersonalChallenge");

            var localVarPath = "/api/v1/challenges/personal/cancel/{appId}/{challengeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (challengeId != null) localVarPathParams.Add("challengeId", this.Configuration.ApiClient.ParameterToString(challengeId)); // path parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (oAuthNoScopes) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelPersonalChallenge", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ActionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ActionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ActionResponse)));
        }

        /// <summary>
        /// Claim the reward of a finished personal challenge Claim the reward of a finished personal challenge by product id and user challenge id
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="challengeId">The challenge id (see challenge_id of Challenge object)</param>
        /// <returns>ActionResponse</returns>
        public ActionResponse ClaimPersonalChallengeReward (string appId, string challengeId)
        {
             ApiResponse<ActionResponse> localVarResponse = ClaimPersonalChallengeRewardWithHttpInfo(appId, challengeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Claim the reward of a finished personal challenge Claim the reward of a finished personal challenge by product id and user challenge id
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="challengeId">The challenge id (see challenge_id of Challenge object)</param>
        /// <returns>ApiResponse of ActionResponse</returns>
        public ApiResponse< ActionResponse > ClaimPersonalChallengeRewardWithHttpInfo (string appId, string challengeId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling ChallengesApi->ClaimPersonalChallengeReward");
            // verify the required parameter 'challengeId' is set
            if (challengeId == null)
                throw new ApiException(400, "Missing required parameter 'challengeId' when calling ChallengesApi->ClaimPersonalChallengeReward");

            var localVarPath = "/api/v1/challenges/personal/claim/{appId}/{challengeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (challengeId != null) localVarPathParams.Add("challengeId", this.Configuration.ApiClient.ParameterToString(challengeId)); // path parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (oAuthNoScopes) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClaimPersonalChallengeReward", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ActionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ActionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ActionResponse)));
        }

        /// <summary>
        /// Claim the reward of a finished personal challenge Claim the reward of a finished personal challenge by product id and user challenge id
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="challengeId">The challenge id (see challenge_id of Challenge object)</param>
        /// <returns>Task of ActionResponse</returns>
        public async System.Threading.Tasks.Task<ActionResponse> ClaimPersonalChallengeRewardAsync (string appId, string challengeId)
        {
             ApiResponse<ActionResponse> localVarResponse = await ClaimPersonalChallengeRewardAsyncWithHttpInfo(appId, challengeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Claim the reward of a finished personal challenge Claim the reward of a finished personal challenge by product id and user challenge id
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="challengeId">The challenge id (see challenge_id of Challenge object)</param>
        /// <returns>Task of ApiResponse (ActionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ActionResponse>> ClaimPersonalChallengeRewardAsyncWithHttpInfo (string appId, string challengeId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling ChallengesApi->ClaimPersonalChallengeReward");
            // verify the required parameter 'challengeId' is set
            if (challengeId == null)
                throw new ApiException(400, "Missing required parameter 'challengeId' when calling ChallengesApi->ClaimPersonalChallengeReward");

            var localVarPath = "/api/v1/challenges/personal/claim/{appId}/{challengeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (challengeId != null) localVarPathParams.Add("challengeId", this.Configuration.ApiClient.ParameterToString(challengeId)); // path parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (oAuthNoScopes) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClaimPersonalChallengeReward", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ActionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ActionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ActionResponse)));
        }

        /// <summary>
        /// Get an access token for the Websockets server notifying of updates in real time Get an access token for the Websockets server notifying of updates in real time
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SocketToken</returns>
        public SocketToken GenerateWebsocketAccessToken ()
        {
             ApiResponse<SocketToken> localVarResponse = GenerateWebsocketAccessTokenWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get an access token for the Websockets server notifying of updates in real time Get an access token for the Websockets server notifying of updates in real time
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SocketToken</returns>
        public ApiResponse< SocketToken > GenerateWebsocketAccessTokenWithHttpInfo ()
        {

            var localVarPath = "/api/v1/challenges/web-socket/generate-token";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (oAuthNoScopes) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenerateWebsocketAccessToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SocketToken>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SocketToken) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SocketToken)));
        }

        /// <summary>
        /// Get an access token for the Websockets server notifying of updates in real time Get an access token for the Websockets server notifying of updates in real time
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of SocketToken</returns>
        public async System.Threading.Tasks.Task<SocketToken> GenerateWebsocketAccessTokenAsync ()
        {
             ApiResponse<SocketToken> localVarResponse = await GenerateWebsocketAccessTokenAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get an access token for the Websockets server notifying of updates in real time Get an access token for the Websockets server notifying of updates in real time
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (SocketToken)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SocketToken>> GenerateWebsocketAccessTokenAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v1/challenges/web-socket/generate-token";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (oAuthNoScopes) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenerateWebsocketAccessToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SocketToken>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SocketToken) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SocketToken)));
        }

        /// <summary>
        /// Get active personal challenges Get active personal challenges organized in categories
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <returns>List&lt;ChallengeCategory&gt;</returns>
        public List<ChallengeCategory> GetActivePersonalChallenges (string appId)
        {
             ApiResponse<List<ChallengeCategory>> localVarResponse = GetActivePersonalChallengesWithHttpInfo(appId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get active personal challenges Get active personal challenges organized in categories
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <returns>ApiResponse of List&lt;ChallengeCategory&gt;</returns>
        public ApiResponse< List<ChallengeCategory> > GetActivePersonalChallengesWithHttpInfo (string appId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling ChallengesApi->GetActivePersonalChallenges");

            var localVarPath = "/api/v1/challenges/personal/get-in-progress-challenges/{appId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (oAuthNoScopes) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetActivePersonalChallenges", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ChallengeCategory>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ChallengeCategory>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ChallengeCategory>)));
        }

        /// <summary>
        /// Get active personal challenges Get active personal challenges organized in categories
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <returns>Task of List&lt;ChallengeCategory&gt;</returns>
        public async System.Threading.Tasks.Task<List<ChallengeCategory>> GetActivePersonalChallengesAsync (string appId)
        {
             ApiResponse<List<ChallengeCategory>> localVarResponse = await GetActivePersonalChallengesAsyncWithHttpInfo(appId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get active personal challenges Get active personal challenges organized in categories
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <returns>Task of ApiResponse (List&lt;ChallengeCategory&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ChallengeCategory>>> GetActivePersonalChallengesAsyncWithHttpInfo (string appId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling ChallengesApi->GetActivePersonalChallenges");

            var localVarPath = "/api/v1/challenges/personal/get-in-progress-challenges/{appId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (oAuthNoScopes) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetActivePersonalChallenges", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ChallengeCategory>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ChallengeCategory>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ChallengeCategory>)));
        }

        /// <summary>
        /// Get personal challenge by id Get personal challenges organized in categories
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="challengeId">The challenge id (see challenge_id of Challenge object)</param>
        /// <returns>Challenge</returns>
        public Challenge GetPersonalChallengeById (string appId, string challengeId)
        {
             ApiResponse<Challenge> localVarResponse = GetPersonalChallengeByIdWithHttpInfo(appId, challengeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get personal challenge by id Get personal challenges organized in categories
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="challengeId">The challenge id (see challenge_id of Challenge object)</param>
        /// <returns>ApiResponse of Challenge</returns>
        public ApiResponse< Challenge > GetPersonalChallengeByIdWithHttpInfo (string appId, string challengeId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling ChallengesApi->GetPersonalChallengeById");
            // verify the required parameter 'challengeId' is set
            if (challengeId == null)
                throw new ApiException(400, "Missing required parameter 'challengeId' when calling ChallengesApi->GetPersonalChallengeById");

            var localVarPath = "/api/v1/challenges/personal/get/{appId}/{challengeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (challengeId != null) localVarPathParams.Add("challengeId", this.Configuration.ApiClient.ParameterToString(challengeId)); // path parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (oAuthNoScopes) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPersonalChallengeById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Challenge>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Challenge) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Challenge)));
        }

        /// <summary>
        /// Get personal challenge by id Get personal challenges organized in categories
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="challengeId">The challenge id (see challenge_id of Challenge object)</param>
        /// <returns>Task of Challenge</returns>
        public async System.Threading.Tasks.Task<Challenge> GetPersonalChallengeByIdAsync (string appId, string challengeId)
        {
             ApiResponse<Challenge> localVarResponse = await GetPersonalChallengeByIdAsyncWithHttpInfo(appId, challengeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get personal challenge by id Get personal challenges organized in categories
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="challengeId">The challenge id (see challenge_id of Challenge object)</param>
        /// <returns>Task of ApiResponse (Challenge)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Challenge>> GetPersonalChallengeByIdAsyncWithHttpInfo (string appId, string challengeId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling ChallengesApi->GetPersonalChallengeById");
            // verify the required parameter 'challengeId' is set
            if (challengeId == null)
                throw new ApiException(400, "Missing required parameter 'challengeId' when calling ChallengesApi->GetPersonalChallengeById");

            var localVarPath = "/api/v1/challenges/personal/get/{appId}/{challengeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (challengeId != null) localVarPathParams.Add("challengeId", this.Configuration.ApiClient.ParameterToString(challengeId)); // path parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (oAuthNoScopes) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPersonalChallengeById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Challenge>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Challenge) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Challenge)));
        }

        /// <summary>
        /// Get personal challenges Get personal challenges organized in categories
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <returns>List&lt;ChallengeCategory&gt;</returns>
        public List<ChallengeCategory> GetPersonalChallenges (string appId)
        {
             ApiResponse<List<ChallengeCategory>> localVarResponse = GetPersonalChallengesWithHttpInfo(appId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get personal challenges Get personal challenges organized in categories
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <returns>ApiResponse of List&lt;ChallengeCategory&gt;</returns>
        public ApiResponse< List<ChallengeCategory> > GetPersonalChallengesWithHttpInfo (string appId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling ChallengesApi->GetPersonalChallenges");

            var localVarPath = "/api/v1/challenges/personal/get/{appId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (oAuthNoScopes) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPersonalChallenges", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ChallengeCategory>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ChallengeCategory>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ChallengeCategory>)));
        }

        /// <summary>
        /// Get personal challenges Get personal challenges organized in categories
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <returns>Task of List&lt;ChallengeCategory&gt;</returns>
        public async System.Threading.Tasks.Task<List<ChallengeCategory>> GetPersonalChallengesAsync (string appId)
        {
             ApiResponse<List<ChallengeCategory>> localVarResponse = await GetPersonalChallengesAsyncWithHttpInfo(appId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get personal challenges Get personal challenges organized in categories
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <returns>Task of ApiResponse (List&lt;ChallengeCategory&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ChallengeCategory>>> GetPersonalChallengesAsyncWithHttpInfo (string appId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling ChallengesApi->GetPersonalChallenges");

            var localVarPath = "/api/v1/challenges/personal/get/{appId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (oAuthNoScopes) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPersonalChallenges", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ChallengeCategory>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ChallengeCategory>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ChallengeCategory>)));
        }

        /// <summary>
        /// Unlock a personal challenges Unlock a personal challenge by product id and challenge id
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="challengeId">The challenge id (see challenge_id of Challenge object)</param>
        /// <returns>ActionResponse</returns>
        public ActionResponse UnlockPersonalChallenge (string appId, string challengeId)
        {
             ApiResponse<ActionResponse> localVarResponse = UnlockPersonalChallengeWithHttpInfo(appId, challengeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Unlock a personal challenges Unlock a personal challenge by product id and challenge id
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="challengeId">The challenge id (see challenge_id of Challenge object)</param>
        /// <returns>ApiResponse of ActionResponse</returns>
        public ApiResponse< ActionResponse > UnlockPersonalChallengeWithHttpInfo (string appId, string challengeId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling ChallengesApi->UnlockPersonalChallenge");
            // verify the required parameter 'challengeId' is set
            if (challengeId == null)
                throw new ApiException(400, "Missing required parameter 'challengeId' when calling ChallengesApi->UnlockPersonalChallenge");

            var localVarPath = "/api/v1/challenges/personal/unlock/{appId}/{challengeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (challengeId != null) localVarPathParams.Add("challengeId", this.Configuration.ApiClient.ParameterToString(challengeId)); // path parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (oAuthNoScopes) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnlockPersonalChallenge", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ActionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ActionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ActionResponse)));
        }

        /// <summary>
        /// Unlock a personal challenges Unlock a personal challenge by product id and challenge id
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="challengeId">The challenge id (see challenge_id of Challenge object)</param>
        /// <returns>Task of ActionResponse</returns>
        public async System.Threading.Tasks.Task<ActionResponse> UnlockPersonalChallengeAsync (string appId, string challengeId)
        {
             ApiResponse<ActionResponse> localVarResponse = await UnlockPersonalChallengeAsyncWithHttpInfo(appId, challengeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Unlock a personal challenges Unlock a personal challenge by product id and challenge id
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="challengeId">The challenge id (see challenge_id of Challenge object)</param>
        /// <returns>Task of ApiResponse (ActionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ActionResponse>> UnlockPersonalChallengeAsyncWithHttpInfo (string appId, string challengeId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling ChallengesApi->UnlockPersonalChallenge");
            // verify the required parameter 'challengeId' is set
            if (challengeId == null)
                throw new ApiException(400, "Missing required parameter 'challengeId' when calling ChallengesApi->UnlockPersonalChallenge");

            var localVarPath = "/api/v1/challenges/personal/unlock/{appId}/{challengeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (challengeId != null) localVarPathParams.Add("challengeId", this.Configuration.ApiClient.ParameterToString(challengeId)); // path parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (oAuthNoScopes) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnlockPersonalChallenge", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ActionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ActionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ActionResponse)));
        }

    }
}
