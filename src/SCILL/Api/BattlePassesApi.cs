/* 
 * SCILL API
 *
 * SCILL gives you the tools to activate, retain and grow your user base in your app or game by bringing you features well known in the gaming industry: Gamification. We take care of the services and technology involved so you can focus on your game and content.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@scillgame.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using SCILL.Client;
using SCILL.Model;

namespace SCILL.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IBattlePassesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Claim the reward of a finished personal challenge
        /// </summary>
        /// <remarks>
        /// Claim the reward of a battle pass level
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Provide the battle pass level id in this payload.</param>
        /// <param name="appId">The app id</param>
        /// <param name="bpid">The id of the battle pass. It’s the same as in battle_pass_id you received in earlier requests (i.e. getting all active battle passes for a product).</param>
        /// <returns>ActionResponse</returns>
        ActionResponse ClaimBattlePassLevelReward (BattlePassLevelId body, string appId, string bpid);

        /// <summary>
        /// Claim the reward of a finished personal challenge
        /// </summary>
        /// <remarks>
        /// Claim the reward of a battle pass level
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Provide the battle pass level id in this payload.</param>
        /// <param name="appId">The app id</param>
        /// <param name="bpid">The id of the battle pass. It’s the same as in battle_pass_id you received in earlier requests (i.e. getting all active battle passes for a product).</param>
        /// <returns>ApiResponse of ActionResponse</returns>
        ApiResponse<ActionResponse> ClaimBattlePassLevelRewardWithHttpInfo (BattlePassLevelId body, string appId, string bpid);
        /// <summary>
        /// Get battle passe by id
        /// </summary>
        /// <remarks>
        /// Get battle pass for the product with id
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="bpid">The id of the battle pass. It’s the same as in battle_pass_id you received in earlier requests (i.e. getting all active battle passes for a product).</param>
        /// <returns>BattlePass</returns>
        BattlePass GetBattlePass (string appId, string bpid);

        /// <summary>
        /// Get battle passe by id
        /// </summary>
        /// <remarks>
        /// Get battle pass for the product with id
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="bpid">The id of the battle pass. It’s the same as in battle_pass_id you received in earlier requests (i.e. getting all active battle passes for a product).</param>
        /// <returns>ApiResponse of BattlePass</returns>
        ApiResponse<BattlePass> GetBattlePassWithHttpInfo (string appId, string bpid);
        /// <summary>
        /// Get battle passes
        /// </summary>
        /// <remarks>
        /// Get battle passes for the product
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <returns>List&lt;BattlePass&gt;</returns>
        List<BattlePass> GetBattlePasses (string appId);

        /// <summary>
        /// Get battle passes
        /// </summary>
        /// <remarks>
        /// Get battle passes for the product
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <returns>ApiResponse of List&lt;BattlePass&gt;</returns>
        ApiResponse<List<BattlePass>> GetBattlePassesWithHttpInfo (string appId);
        /// <summary>
        /// Unlock the level of a battle pass
        /// </summary>
        /// <remarks>
        /// Unlock a battle pass level
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Provide the battle pass level id in this payload</param>
        /// <param name="appId">The app id</param>
        /// <param name="bpid">The id of the battle pass. It’s the same as in battle_pass_id you received in earlier requests (i.e. getting all active battle passes for a product).</param>
        /// <returns>ActionResponse</returns>
        ActionResponse UnlockBattlePassLevel (BattlePassLevelId body, string appId, string bpid);

        /// <summary>
        /// Unlock the level of a battle pass
        /// </summary>
        /// <remarks>
        /// Unlock a battle pass level
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Provide the battle pass level id in this payload</param>
        /// <param name="appId">The app id</param>
        /// <param name="bpid">The id of the battle pass. It’s the same as in battle_pass_id you received in earlier requests (i.e. getting all active battle passes for a product).</param>
        /// <returns>ApiResponse of ActionResponse</returns>
        ApiResponse<ActionResponse> UnlockBattlePassLevelWithHttpInfo (BattlePassLevelId body, string appId, string bpid);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Claim the reward of a finished personal challenge
        /// </summary>
        /// <remarks>
        /// Claim the reward of a battle pass level
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Provide the battle pass level id in this payload.</param>
        /// <param name="appId">The app id</param>
        /// <param name="bpid">The id of the battle pass. It’s the same as in battle_pass_id you received in earlier requests (i.e. getting all active battle passes for a product).</param>
        /// <returns>Task of ActionResponse</returns>
        System.Threading.Tasks.Task<ActionResponse> ClaimBattlePassLevelRewardAsync (BattlePassLevelId body, string appId, string bpid);

        /// <summary>
        /// Claim the reward of a finished personal challenge
        /// </summary>
        /// <remarks>
        /// Claim the reward of a battle pass level
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Provide the battle pass level id in this payload.</param>
        /// <param name="appId">The app id</param>
        /// <param name="bpid">The id of the battle pass. It’s the same as in battle_pass_id you received in earlier requests (i.e. getting all active battle passes for a product).</param>
        /// <returns>Task of ApiResponse (ActionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ActionResponse>> ClaimBattlePassLevelRewardAsyncWithHttpInfo (BattlePassLevelId body, string appId, string bpid);
        /// <summary>
        /// Get battle passe by id
        /// </summary>
        /// <remarks>
        /// Get battle pass for the product with id
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="bpid">The id of the battle pass. It’s the same as in battle_pass_id you received in earlier requests (i.e. getting all active battle passes for a product).</param>
        /// <returns>Task of BattlePass</returns>
        System.Threading.Tasks.Task<BattlePass> GetBattlePassAsync (string appId, string bpid);

        /// <summary>
        /// Get battle passe by id
        /// </summary>
        /// <remarks>
        /// Get battle pass for the product with id
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="bpid">The id of the battle pass. It’s the same as in battle_pass_id you received in earlier requests (i.e. getting all active battle passes for a product).</param>
        /// <returns>Task of ApiResponse (BattlePass)</returns>
        System.Threading.Tasks.Task<ApiResponse<BattlePass>> GetBattlePassAsyncWithHttpInfo (string appId, string bpid);
        /// <summary>
        /// Get battle passes
        /// </summary>
        /// <remarks>
        /// Get battle passes for the product
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <returns>Task of List&lt;BattlePass&gt;</returns>
        System.Threading.Tasks.Task<List<BattlePass>> GetBattlePassesAsync (string appId);

        /// <summary>
        /// Get battle passes
        /// </summary>
        /// <remarks>
        /// Get battle passes for the product
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <returns>Task of ApiResponse (List&lt;BattlePass&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BattlePass>>> GetBattlePassesAsyncWithHttpInfo (string appId);
        /// <summary>
        /// Unlock the level of a battle pass
        /// </summary>
        /// <remarks>
        /// Unlock a battle pass level
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Provide the battle pass level id in this payload</param>
        /// <param name="appId">The app id</param>
        /// <param name="bpid">The id of the battle pass. It’s the same as in battle_pass_id you received in earlier requests (i.e. getting all active battle passes for a product).</param>
        /// <returns>Task of ActionResponse</returns>
        System.Threading.Tasks.Task<ActionResponse> UnlockBattlePassLevelAsync (BattlePassLevelId body, string appId, string bpid);

        /// <summary>
        /// Unlock the level of a battle pass
        /// </summary>
        /// <remarks>
        /// Unlock a battle pass level
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Provide the battle pass level id in this payload</param>
        /// <param name="appId">The app id</param>
        /// <param name="bpid">The id of the battle pass. It’s the same as in battle_pass_id you received in earlier requests (i.e. getting all active battle passes for a product).</param>
        /// <returns>Task of ApiResponse (ActionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ActionResponse>> UnlockBattlePassLevelAsyncWithHttpInfo (BattlePassLevelId body, string appId, string bpid);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class BattlePassesApi : IBattlePassesApi
    {
        private SCILL.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BattlePassesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BattlePassesApi(String basePath)
        {
            this.Configuration = new SCILL.Client.Configuration { BasePath = basePath };

            ExceptionFactory = SCILL.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BattlePassesApi"/> class
        /// </summary>
        /// <returns></returns>
        public BattlePassesApi()
        {
            this.Configuration = SCILL.Client.Configuration.Default;

            ExceptionFactory = SCILL.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BattlePassesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BattlePassesApi(SCILL.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = SCILL.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = SCILL.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public SCILL.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public SCILL.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Claim the reward of a finished personal challenge Claim the reward of a battle pass level
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Provide the battle pass level id in this payload.</param>
        /// <param name="appId">The app id</param>
        /// <param name="bpid">The id of the battle pass. It’s the same as in battle_pass_id you received in earlier requests (i.e. getting all active battle passes for a product).</param>
        /// <returns>ActionResponse</returns>
        public ActionResponse ClaimBattlePassLevelReward (BattlePassLevelId body, string appId, string bpid)
        {
             ApiResponse<ActionResponse> localVarResponse = ClaimBattlePassLevelRewardWithHttpInfo(body, appId, bpid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Claim the reward of a finished personal challenge Claim the reward of a battle pass level
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Provide the battle pass level id in this payload.</param>
        /// <param name="appId">The app id</param>
        /// <param name="bpid">The id of the battle pass. It’s the same as in battle_pass_id you received in earlier requests (i.e. getting all active battle passes for a product).</param>
        /// <returns>ApiResponse of ActionResponse</returns>
        public ApiResponse< ActionResponse > ClaimBattlePassLevelRewardWithHttpInfo (BattlePassLevelId body, string appId, string bpid)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BattlePassesApi->ClaimBattlePassLevelReward");
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling BattlePassesApi->ClaimBattlePassLevelReward");
            // verify the required parameter 'bpid' is set
            if (bpid == null)
                throw new ApiException(400, "Missing required parameter 'bpid' when calling BattlePassesApi->ClaimBattlePassLevelReward");

            var localVarPath = "/api/v1/battle-passes/{appId}/{bpid}/claim-level";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (bpid != null) localVarPathParams.Add("bpid", this.Configuration.ApiClient.ParameterToString(bpid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (oAuthNoScopes) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClaimBattlePassLevelReward", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ActionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ActionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ActionResponse)));
        }

        /// <summary>
        /// Claim the reward of a finished personal challenge Claim the reward of a battle pass level
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Provide the battle pass level id in this payload.</param>
        /// <param name="appId">The app id</param>
        /// <param name="bpid">The id of the battle pass. It’s the same as in battle_pass_id you received in earlier requests (i.e. getting all active battle passes for a product).</param>
        /// <returns>Task of ActionResponse</returns>
        public async System.Threading.Tasks.Task<ActionResponse> ClaimBattlePassLevelRewardAsync (BattlePassLevelId body, string appId, string bpid)
        {
             ApiResponse<ActionResponse> localVarResponse = await ClaimBattlePassLevelRewardAsyncWithHttpInfo(body, appId, bpid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Claim the reward of a finished personal challenge Claim the reward of a battle pass level
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Provide the battle pass level id in this payload.</param>
        /// <param name="appId">The app id</param>
        /// <param name="bpid">The id of the battle pass. It’s the same as in battle_pass_id you received in earlier requests (i.e. getting all active battle passes for a product).</param>
        /// <returns>Task of ApiResponse (ActionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ActionResponse>> ClaimBattlePassLevelRewardAsyncWithHttpInfo (BattlePassLevelId body, string appId, string bpid)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BattlePassesApi->ClaimBattlePassLevelReward");
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling BattlePassesApi->ClaimBattlePassLevelReward");
            // verify the required parameter 'bpid' is set
            if (bpid == null)
                throw new ApiException(400, "Missing required parameter 'bpid' when calling BattlePassesApi->ClaimBattlePassLevelReward");

            var localVarPath = "/api/v1/battle-passes/{appId}/{bpid}/claim-level";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (bpid != null) localVarPathParams.Add("bpid", this.Configuration.ApiClient.ParameterToString(bpid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (oAuthNoScopes) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClaimBattlePassLevelReward", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ActionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ActionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ActionResponse)));
        }

        /// <summary>
        /// Get battle passe by id Get battle pass for the product with id
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="bpid">The id of the battle pass. It’s the same as in battle_pass_id you received in earlier requests (i.e. getting all active battle passes for a product).</param>
        /// <returns>BattlePass</returns>
        public BattlePass GetBattlePass (string appId, string bpid)
        {
             ApiResponse<BattlePass> localVarResponse = GetBattlePassWithHttpInfo(appId, bpid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get battle passe by id Get battle pass for the product with id
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="bpid">The id of the battle pass. It’s the same as in battle_pass_id you received in earlier requests (i.e. getting all active battle passes for a product).</param>
        /// <returns>ApiResponse of BattlePass</returns>
        public ApiResponse< BattlePass > GetBattlePassWithHttpInfo (string appId, string bpid)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling BattlePassesApi->GetBattlePass");
            // verify the required parameter 'bpid' is set
            if (bpid == null)
                throw new ApiException(400, "Missing required parameter 'bpid' when calling BattlePassesApi->GetBattlePass");

            var localVarPath = "/api/v1/battle-passes/{appId}/{bpid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (bpid != null) localVarPathParams.Add("bpid", this.Configuration.ApiClient.ParameterToString(bpid)); // path parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (oAuthNoScopes) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBattlePass", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BattlePass>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BattlePass) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BattlePass)));
        }

        /// <summary>
        /// Get battle passe by id Get battle pass for the product with id
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="bpid">The id of the battle pass. It’s the same as in battle_pass_id you received in earlier requests (i.e. getting all active battle passes for a product).</param>
        /// <returns>Task of BattlePass</returns>
        public async System.Threading.Tasks.Task<BattlePass> GetBattlePassAsync (string appId, string bpid)
        {
             ApiResponse<BattlePass> localVarResponse = await GetBattlePassAsyncWithHttpInfo(appId, bpid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get battle passe by id Get battle pass for the product with id
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="bpid">The id of the battle pass. It’s the same as in battle_pass_id you received in earlier requests (i.e. getting all active battle passes for a product).</param>
        /// <returns>Task of ApiResponse (BattlePass)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BattlePass>> GetBattlePassAsyncWithHttpInfo (string appId, string bpid)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling BattlePassesApi->GetBattlePass");
            // verify the required parameter 'bpid' is set
            if (bpid == null)
                throw new ApiException(400, "Missing required parameter 'bpid' when calling BattlePassesApi->GetBattlePass");

            var localVarPath = "/api/v1/battle-passes/{appId}/{bpid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (bpid != null) localVarPathParams.Add("bpid", this.Configuration.ApiClient.ParameterToString(bpid)); // path parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (oAuthNoScopes) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBattlePass", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BattlePass>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BattlePass) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BattlePass)));
        }

        /// <summary>
        /// Get battle passes Get battle passes for the product
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <returns>List&lt;BattlePass&gt;</returns>
        public List<BattlePass> GetBattlePasses (string appId)
        {
             ApiResponse<List<BattlePass>> localVarResponse = GetBattlePassesWithHttpInfo(appId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get battle passes Get battle passes for the product
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <returns>ApiResponse of List&lt;BattlePass&gt;</returns>
        public ApiResponse< List<BattlePass> > GetBattlePassesWithHttpInfo (string appId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling BattlePassesApi->GetBattlePasses");

            var localVarPath = "/api/v1/battle-passes/{appId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (oAuthNoScopes) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBattlePasses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BattlePass>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<BattlePass>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BattlePass>)));
        }

        /// <summary>
        /// Get battle passes Get battle passes for the product
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <returns>Task of List&lt;BattlePass&gt;</returns>
        public async System.Threading.Tasks.Task<List<BattlePass>> GetBattlePassesAsync (string appId)
        {
             ApiResponse<List<BattlePass>> localVarResponse = await GetBattlePassesAsyncWithHttpInfo(appId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get battle passes Get battle passes for the product
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <returns>Task of ApiResponse (List&lt;BattlePass&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<BattlePass>>> GetBattlePassesAsyncWithHttpInfo (string appId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling BattlePassesApi->GetBattlePasses");

            var localVarPath = "/api/v1/battle-passes/{appId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (oAuthNoScopes) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBattlePasses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BattlePass>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<BattlePass>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BattlePass>)));
        }

        /// <summary>
        /// Unlock the level of a battle pass Unlock a battle pass level
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Provide the battle pass level id in this payload</param>
        /// <param name="appId">The app id</param>
        /// <param name="bpid">The id of the battle pass. It’s the same as in battle_pass_id you received in earlier requests (i.e. getting all active battle passes for a product).</param>
        /// <returns>ActionResponse</returns>
        public ActionResponse UnlockBattlePassLevel (BattlePassLevelId body, string appId, string bpid)
        {
             ApiResponse<ActionResponse> localVarResponse = UnlockBattlePassLevelWithHttpInfo(body, appId, bpid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Unlock the level of a battle pass Unlock a battle pass level
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Provide the battle pass level id in this payload</param>
        /// <param name="appId">The app id</param>
        /// <param name="bpid">The id of the battle pass. It’s the same as in battle_pass_id you received in earlier requests (i.e. getting all active battle passes for a product).</param>
        /// <returns>ApiResponse of ActionResponse</returns>
        public ApiResponse< ActionResponse > UnlockBattlePassLevelWithHttpInfo (BattlePassLevelId body, string appId, string bpid)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BattlePassesApi->UnlockBattlePassLevel");
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling BattlePassesApi->UnlockBattlePassLevel");
            // verify the required parameter 'bpid' is set
            if (bpid == null)
                throw new ApiException(400, "Missing required parameter 'bpid' when calling BattlePassesApi->UnlockBattlePassLevel");

            var localVarPath = "/api/v1/battle-passes/{appId}/{bpid}/unlock";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (bpid != null) localVarPathParams.Add("bpid", this.Configuration.ApiClient.ParameterToString(bpid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (oAuthNoScopes) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnlockBattlePassLevel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ActionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ActionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ActionResponse)));
        }

        /// <summary>
        /// Unlock the level of a battle pass Unlock a battle pass level
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Provide the battle pass level id in this payload</param>
        /// <param name="appId">The app id</param>
        /// <param name="bpid">The id of the battle pass. It’s the same as in battle_pass_id you received in earlier requests (i.e. getting all active battle passes for a product).</param>
        /// <returns>Task of ActionResponse</returns>
        public async System.Threading.Tasks.Task<ActionResponse> UnlockBattlePassLevelAsync (BattlePassLevelId body, string appId, string bpid)
        {
             ApiResponse<ActionResponse> localVarResponse = await UnlockBattlePassLevelAsyncWithHttpInfo(body, appId, bpid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Unlock the level of a battle pass Unlock a battle pass level
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Provide the battle pass level id in this payload</param>
        /// <param name="appId">The app id</param>
        /// <param name="bpid">The id of the battle pass. It’s the same as in battle_pass_id you received in earlier requests (i.e. getting all active battle passes for a product).</param>
        /// <returns>Task of ApiResponse (ActionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ActionResponse>> UnlockBattlePassLevelAsyncWithHttpInfo (BattlePassLevelId body, string appId, string bpid)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BattlePassesApi->UnlockBattlePassLevel");
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling BattlePassesApi->UnlockBattlePassLevel");
            // verify the required parameter 'bpid' is set
            if (bpid == null)
                throw new ApiException(400, "Missing required parameter 'bpid' when calling BattlePassesApi->UnlockBattlePassLevel");

            var localVarPath = "/api/v1/battle-passes/{appId}/{bpid}/unlock";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (bpid != null) localVarPathParams.Add("bpid", this.Configuration.ApiClient.ParameterToString(bpid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (oAuthNoScopes) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnlockBattlePassLevel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ActionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ActionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ActionResponse)));
        }

    }
}
