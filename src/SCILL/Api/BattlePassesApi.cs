/* 
 * SCILL API
 *
 * SCILL gives you the tools to activate, retain and grow your user base in your app or game by bringing you features well known in the gaming industry: Gamification. We take care of the services and technology involved so you can focus on your game and content.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@scillgame.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using SCILL.Client;
using SCILL.Model;

namespace SCILL.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IBattlePassesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Activate a given battle pass level by id
        /// </summary>
        /// <remarks>
        /// Activate a given battle pass level by id
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="levelId">The id of the battle pass level.</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>ActionResponse</returns>
        ActionResponse ActivateBattlePassLevel (string appId, string levelId, string language = null);

        /// <summary>
        /// Activate a given battle pass level by id
        /// </summary>
        /// <remarks>
        /// Activate a given battle pass level by id
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="levelId">The id of the battle pass level.</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>ApiResponse of ActionResponse</returns>
        ApiResponse<ActionResponse> ActivateBattlePassLevelWithHttpInfo (string appId, string levelId, string language = null);
        /// <summary>
        /// Claim the battle pass level reward. This will trigger a Webhook that you can use to unlock the reward on server side. If you don&#x27;t have a server you can also unlock in the client application after receiving a positive response.
        /// </summary>
        /// <remarks>
        /// Claim the battle pass level id
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="levelId">The id of the battle pass level.</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>ActionResponse</returns>
        ActionResponse ClaimBattlePassLevelReward (string appId, string levelId, string language = null);

        /// <summary>
        /// Claim the battle pass level reward. This will trigger a Webhook that you can use to unlock the reward on server side. If you don&#x27;t have a server you can also unlock in the client application after receiving a positive response.
        /// </summary>
        /// <remarks>
        /// Claim the battle pass level id
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="levelId">The id of the battle pass level.</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>ApiResponse of ActionResponse</returns>
        ApiResponse<ActionResponse> ClaimBattlePassLevelRewardWithHttpInfo (string appId, string levelId, string language = null);
        /// <summary>
        /// Get battle passes
        /// </summary>
        /// <remarks>
        /// Get active battle passes for the app
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>List&lt;BattlePass&gt;</returns>
        List<BattlePass> GetActiveBattlePasses (string appId, string language = null);

        /// <summary>
        /// Get battle passes
        /// </summary>
        /// <remarks>
        /// Get active battle passes for the app
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>ApiResponse of List&lt;BattlePass&gt;</returns>
        ApiResponse<List<BattlePass>> GetActiveBattlePassesWithHttpInfo (string appId, string language = null);
        /// <summary>
        /// Get battle pass levels for an app (from all battle passes)
        /// </summary>
        /// <remarks>
        /// Get all battle pass levels for an app
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>List&lt;BattlePassLevel&gt;</returns>
        List<BattlePassLevel> GetAllBattlePassLevels (string appId, string language = null);

        /// <summary>
        /// Get battle pass levels for an app (from all battle passes)
        /// </summary>
        /// <remarks>
        /// Get all battle pass levels for an app
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>ApiResponse of List&lt;BattlePassLevel&gt;</returns>
        ApiResponse<List<BattlePassLevel>> GetAllBattlePassLevelsWithHttpInfo (string appId, string language = null);
        /// <summary>
        /// Get battle pass by id
        /// </summary>
        /// <remarks>
        /// Get battle pass for the product with id
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="battlePassId">The id of the battle pass. It’s the same as in battle_pass_id you received in earlier requests (i.e. getting all active battle passes for a product).</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>BattlePass</returns>
        BattlePass GetBattlePass (string appId, string battlePassId, string language = null);

        /// <summary>
        /// Get battle pass by id
        /// </summary>
        /// <remarks>
        /// Get battle pass for the product with id
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="battlePassId">The id of the battle pass. It’s the same as in battle_pass_id you received in earlier requests (i.e. getting all active battle passes for a product).</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>ApiResponse of BattlePass</returns>
        ApiResponse<BattlePass> GetBattlePassWithHttpInfo (string appId, string battlePassId, string language = null);
        /// <summary>
        /// Get battle pass levels for a battle pass
        /// </summary>
        /// <remarks>
        /// Get battle pass levels for a battle pass
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="battlePassId">The id of the battle pass. It’s the same as in battle_pass_id you received in earlier requests (i.e. getting all active battle passes for a product).</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>List&lt;BattlePassLevel&gt;</returns>
        List<BattlePassLevel> GetBattlePassLevels (string appId, string battlePassId, string language = null);

        /// <summary>
        /// Get battle pass levels for a battle pass
        /// </summary>
        /// <remarks>
        /// Get battle pass levels for a battle pass
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="battlePassId">The id of the battle pass. It’s the same as in battle_pass_id you received in earlier requests (i.e. getting all active battle passes for a product).</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>ApiResponse of List&lt;BattlePassLevel&gt;</returns>
        ApiResponse<List<BattlePassLevel>> GetBattlePassLevelsWithHttpInfo (string appId, string battlePassId, string language = null);
        /// <summary>
        /// Get battle passes
        /// </summary>
        /// <remarks>
        /// Get battle passes for the product
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>List&lt;BattlePass&gt;</returns>
        List<BattlePass> GetBattlePasses (string appId, string language = null);

        /// <summary>
        /// Get battle passes
        /// </summary>
        /// <remarks>
        /// Get battle passes for the product
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>ApiResponse of List&lt;BattlePass&gt;</returns>
        ApiResponse<List<BattlePass>> GetBattlePassesWithHttpInfo (string appId, string language = null);
        /// <summary>
        /// Get battle passes unlocked by the user
        /// </summary>
        /// <remarks>
        /// Get unlocked battle passes for the user encoded in the access token
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>List&lt;BattlePass&gt;</returns>
        List<BattlePass> GetUnlockedBattlePasses (string appId, string language = null);

        /// <summary>
        /// Get battle passes unlocked by the user
        /// </summary>
        /// <remarks>
        /// Get unlocked battle passes for the user encoded in the access token
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>ApiResponse of List&lt;BattlePass&gt;</returns>
        ApiResponse<List<BattlePass>> GetUnlockedBattlePassesWithHttpInfo (string appId, string language = null);
        /// <summary>
        /// Unlock the battle pass for the user specified in the access token
        /// </summary>
        /// <remarks>
        /// Unlock the battle pass for a user
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="battlePassId">The id of the battle pass. It’s the same as in battle_pass_id you received in earlier requests (i.e. getting all active battle passes for a product).</param>
        /// <param name="body">Provide purchase info for the battle pass (optional)</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>BattlePassUnlockInfo</returns>
        BattlePassUnlockInfo UnlockBattlePass (string appId, string battlePassId, BattlePassUnlockPayload body = null, string language = null);

        /// <summary>
        /// Unlock the battle pass for the user specified in the access token
        /// </summary>
        /// <remarks>
        /// Unlock the battle pass for a user
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="battlePassId">The id of the battle pass. It’s the same as in battle_pass_id you received in earlier requests (i.e. getting all active battle passes for a product).</param>
        /// <param name="body">Provide purchase info for the battle pass (optional)</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>ApiResponse of BattlePassUnlockInfo</returns>
        ApiResponse<BattlePassUnlockInfo> UnlockBattlePassWithHttpInfo (string appId, string battlePassId, BattlePassUnlockPayload body = null, string language = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Activate a given battle pass level by id
        /// </summary>
        /// <remarks>
        /// Activate a given battle pass level by id
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="levelId">The id of the battle pass level.</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Task of ActionResponse</returns>
        System.Threading.Tasks.Task<ActionResponse> ActivateBattlePassLevelAsync (string appId, string levelId, string language = null);

        /// <summary>
        /// Activate a given battle pass level by id
        /// </summary>
        /// <remarks>
        /// Activate a given battle pass level by id
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="levelId">The id of the battle pass level.</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Task of ApiResponse (ActionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ActionResponse>> ActivateBattlePassLevelAsyncWithHttpInfo (string appId, string levelId, string language = null);
        /// <summary>
        /// Claim the battle pass level reward. This will trigger a Webhook that you can use to unlock the reward on server side. If you don&#x27;t have a server you can also unlock in the client application after receiving a positive response.
        /// </summary>
        /// <remarks>
        /// Claim the battle pass level id
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="levelId">The id of the battle pass level.</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Task of ActionResponse</returns>
        System.Threading.Tasks.Task<ActionResponse> ClaimBattlePassLevelRewardAsync (string appId, string levelId, string language = null);

        /// <summary>
        /// Claim the battle pass level reward. This will trigger a Webhook that you can use to unlock the reward on server side. If you don&#x27;t have a server you can also unlock in the client application after receiving a positive response.
        /// </summary>
        /// <remarks>
        /// Claim the battle pass level id
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="levelId">The id of the battle pass level.</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Task of ApiResponse (ActionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ActionResponse>> ClaimBattlePassLevelRewardAsyncWithHttpInfo (string appId, string levelId, string language = null);
        /// <summary>
        /// Get battle passes
        /// </summary>
        /// <remarks>
        /// Get active battle passes for the app
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Task of List&lt;BattlePass&gt;</returns>
        System.Threading.Tasks.Task<List<BattlePass>> GetActiveBattlePassesAsync (string appId, string language = null);

        /// <summary>
        /// Get battle passes
        /// </summary>
        /// <remarks>
        /// Get active battle passes for the app
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;BattlePass&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BattlePass>>> GetActiveBattlePassesAsyncWithHttpInfo (string appId, string language = null);
        /// <summary>
        /// Get battle pass levels for an app (from all battle passes)
        /// </summary>
        /// <remarks>
        /// Get all battle pass levels for an app
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Task of List&lt;BattlePassLevel&gt;</returns>
        System.Threading.Tasks.Task<List<BattlePassLevel>> GetAllBattlePassLevelsAsync (string appId, string language = null);

        /// <summary>
        /// Get battle pass levels for an app (from all battle passes)
        /// </summary>
        /// <remarks>
        /// Get all battle pass levels for an app
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;BattlePassLevel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BattlePassLevel>>> GetAllBattlePassLevelsAsyncWithHttpInfo (string appId, string language = null);
        /// <summary>
        /// Get battle pass by id
        /// </summary>
        /// <remarks>
        /// Get battle pass for the product with id
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="battlePassId">The id of the battle pass. It’s the same as in battle_pass_id you received in earlier requests (i.e. getting all active battle passes for a product).</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Task of BattlePass</returns>
        System.Threading.Tasks.Task<BattlePass> GetBattlePassAsync (string appId, string battlePassId, string language = null);

        /// <summary>
        /// Get battle pass by id
        /// </summary>
        /// <remarks>
        /// Get battle pass for the product with id
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="battlePassId">The id of the battle pass. It’s the same as in battle_pass_id you received in earlier requests (i.e. getting all active battle passes for a product).</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Task of ApiResponse (BattlePass)</returns>
        System.Threading.Tasks.Task<ApiResponse<BattlePass>> GetBattlePassAsyncWithHttpInfo (string appId, string battlePassId, string language = null);
        /// <summary>
        /// Get battle pass levels for a battle pass
        /// </summary>
        /// <remarks>
        /// Get battle pass levels for a battle pass
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="battlePassId">The id of the battle pass. It’s the same as in battle_pass_id you received in earlier requests (i.e. getting all active battle passes for a product).</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Task of List&lt;BattlePassLevel&gt;</returns>
        System.Threading.Tasks.Task<List<BattlePassLevel>> GetBattlePassLevelsAsync (string appId, string battlePassId, string language = null);

        /// <summary>
        /// Get battle pass levels for a battle pass
        /// </summary>
        /// <remarks>
        /// Get battle pass levels for a battle pass
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="battlePassId">The id of the battle pass. It’s the same as in battle_pass_id you received in earlier requests (i.e. getting all active battle passes for a product).</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;BattlePassLevel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BattlePassLevel>>> GetBattlePassLevelsAsyncWithHttpInfo (string appId, string battlePassId, string language = null);
        /// <summary>
        /// Get battle passes
        /// </summary>
        /// <remarks>
        /// Get battle passes for the product
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Task of List&lt;BattlePass&gt;</returns>
        System.Threading.Tasks.Task<List<BattlePass>> GetBattlePassesAsync (string appId, string language = null);

        /// <summary>
        /// Get battle passes
        /// </summary>
        /// <remarks>
        /// Get battle passes for the product
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;BattlePass&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BattlePass>>> GetBattlePassesAsyncWithHttpInfo (string appId, string language = null);
        /// <summary>
        /// Get battle passes unlocked by the user
        /// </summary>
        /// <remarks>
        /// Get unlocked battle passes for the user encoded in the access token
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Task of List&lt;BattlePass&gt;</returns>
        System.Threading.Tasks.Task<List<BattlePass>> GetUnlockedBattlePassesAsync (string appId, string language = null);

        /// <summary>
        /// Get battle passes unlocked by the user
        /// </summary>
        /// <remarks>
        /// Get unlocked battle passes for the user encoded in the access token
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;BattlePass&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BattlePass>>> GetUnlockedBattlePassesAsyncWithHttpInfo (string appId, string language = null);
        /// <summary>
        /// Unlock the battle pass for the user specified in the access token
        /// </summary>
        /// <remarks>
        /// Unlock the battle pass for a user
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="battlePassId">The id of the battle pass. It’s the same as in battle_pass_id you received in earlier requests (i.e. getting all active battle passes for a product).</param>
        /// <param name="body">Provide purchase info for the battle pass (optional)</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Task of BattlePassUnlockInfo</returns>
        System.Threading.Tasks.Task<BattlePassUnlockInfo> UnlockBattlePassAsync (string appId, string battlePassId, BattlePassUnlockPayload body = null, string language = null);

        /// <summary>
        /// Unlock the battle pass for the user specified in the access token
        /// </summary>
        /// <remarks>
        /// Unlock the battle pass for a user
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="battlePassId">The id of the battle pass. It’s the same as in battle_pass_id you received in earlier requests (i.e. getting all active battle passes for a product).</param>
        /// <param name="body">Provide purchase info for the battle pass (optional)</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Task of ApiResponse (BattlePassUnlockInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<BattlePassUnlockInfo>> UnlockBattlePassAsyncWithHttpInfo (string appId, string battlePassId, BattlePassUnlockPayload body = null, string language = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class BattlePassesApi : IBattlePassesApi
    {
        private SCILL.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BattlePassesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BattlePassesApi(String basePath)
        {
            this.Configuration = new SCILL.Client.Configuration { BasePath = basePath };

            ExceptionFactory = SCILL.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BattlePassesApi"/> class
        /// </summary>
        /// <returns></returns>
        public BattlePassesApi()
        {
            this.Configuration = SCILL.Client.Configuration.Default;

            ExceptionFactory = SCILL.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BattlePassesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BattlePassesApi(SCILL.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = SCILL.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = SCILL.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public SCILL.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public SCILL.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Activate a given battle pass level by id Activate a given battle pass level by id
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="levelId">The id of the battle pass level.</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>ActionResponse</returns>
        public ActionResponse ActivateBattlePassLevel (string appId, string levelId, string language = null)
        {
             ApiResponse<ActionResponse> localVarResponse = ActivateBattlePassLevelWithHttpInfo(appId, levelId, language);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Activate a given battle pass level by id Activate a given battle pass level by id
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="levelId">The id of the battle pass level.</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>ApiResponse of ActionResponse</returns>
        public ApiResponse< ActionResponse > ActivateBattlePassLevelWithHttpInfo (string appId, string levelId, string language = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling BattlePassesApi->ActivateBattlePassLevel");
            // verify the required parameter 'levelId' is set
            if (levelId == null)
                throw new ApiException(400, "Missing required parameter 'levelId' when calling BattlePassesApi->ActivateBattlePassLevel");

            var localVarPath = "/api/v1/battle-pass-levels/{appId}/activate/{levelId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (levelId != null) localVarPathParams.Add("levelId", this.Configuration.ApiClient.ParameterToString(levelId)); // path parameter
            if (language != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "language", language)); // query parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (oAuthNoScopes) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActivateBattlePassLevel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ActionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ActionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ActionResponse)));
        }

        /// <summary>
        /// Activate a given battle pass level by id Activate a given battle pass level by id
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="levelId">The id of the battle pass level.</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Task of ActionResponse</returns>
        public async System.Threading.Tasks.Task<ActionResponse> ActivateBattlePassLevelAsync (string appId, string levelId, string language = null)
        {
             ApiResponse<ActionResponse> localVarResponse = await ActivateBattlePassLevelAsyncWithHttpInfo(appId, levelId, language);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Activate a given battle pass level by id Activate a given battle pass level by id
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="levelId">The id of the battle pass level.</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Task of ApiResponse (ActionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ActionResponse>> ActivateBattlePassLevelAsyncWithHttpInfo (string appId, string levelId, string language = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling BattlePassesApi->ActivateBattlePassLevel");
            // verify the required parameter 'levelId' is set
            if (levelId == null)
                throw new ApiException(400, "Missing required parameter 'levelId' when calling BattlePassesApi->ActivateBattlePassLevel");

            var localVarPath = "/api/v1/battle-pass-levels/{appId}/activate/{levelId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (levelId != null) localVarPathParams.Add("levelId", this.Configuration.ApiClient.ParameterToString(levelId)); // path parameter
            if (language != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "language", language)); // query parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (oAuthNoScopes) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActivateBattlePassLevel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ActionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ActionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ActionResponse)));
        }

        /// <summary>
        /// Claim the battle pass level reward. This will trigger a Webhook that you can use to unlock the reward on server side. If you don&#x27;t have a server you can also unlock in the client application after receiving a positive response. Claim the battle pass level id
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="levelId">The id of the battle pass level.</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>ActionResponse</returns>
        public ActionResponse ClaimBattlePassLevelReward (string appId, string levelId, string language = null)
        {
             ApiResponse<ActionResponse> localVarResponse = ClaimBattlePassLevelRewardWithHttpInfo(appId, levelId, language);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Claim the battle pass level reward. This will trigger a Webhook that you can use to unlock the reward on server side. If you don&#x27;t have a server you can also unlock in the client application after receiving a positive response. Claim the battle pass level id
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="levelId">The id of the battle pass level.</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>ApiResponse of ActionResponse</returns>
        public ApiResponse< ActionResponse > ClaimBattlePassLevelRewardWithHttpInfo (string appId, string levelId, string language = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling BattlePassesApi->ClaimBattlePassLevelReward");
            // verify the required parameter 'levelId' is set
            if (levelId == null)
                throw new ApiException(400, "Missing required parameter 'levelId' when calling BattlePassesApi->ClaimBattlePassLevelReward");

            var localVarPath = "/api/v1/battle-pass-levels/{appId}/claim/{levelId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (levelId != null) localVarPathParams.Add("levelId", this.Configuration.ApiClient.ParameterToString(levelId)); // path parameter
            if (language != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "language", language)); // query parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (oAuthNoScopes) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClaimBattlePassLevelReward", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ActionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ActionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ActionResponse)));
        }

        /// <summary>
        /// Claim the battle pass level reward. This will trigger a Webhook that you can use to unlock the reward on server side. If you don&#x27;t have a server you can also unlock in the client application after receiving a positive response. Claim the battle pass level id
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="levelId">The id of the battle pass level.</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Task of ActionResponse</returns>
        public async System.Threading.Tasks.Task<ActionResponse> ClaimBattlePassLevelRewardAsync (string appId, string levelId, string language = null)
        {
             ApiResponse<ActionResponse> localVarResponse = await ClaimBattlePassLevelRewardAsyncWithHttpInfo(appId, levelId, language);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Claim the battle pass level reward. This will trigger a Webhook that you can use to unlock the reward on server side. If you don&#x27;t have a server you can also unlock in the client application after receiving a positive response. Claim the battle pass level id
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="levelId">The id of the battle pass level.</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Task of ApiResponse (ActionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ActionResponse>> ClaimBattlePassLevelRewardAsyncWithHttpInfo (string appId, string levelId, string language = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling BattlePassesApi->ClaimBattlePassLevelReward");
            // verify the required parameter 'levelId' is set
            if (levelId == null)
                throw new ApiException(400, "Missing required parameter 'levelId' when calling BattlePassesApi->ClaimBattlePassLevelReward");

            var localVarPath = "/api/v1/battle-pass-levels/{appId}/claim/{levelId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (levelId != null) localVarPathParams.Add("levelId", this.Configuration.ApiClient.ParameterToString(levelId)); // path parameter
            if (language != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "language", language)); // query parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (oAuthNoScopes) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClaimBattlePassLevelReward", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ActionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ActionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ActionResponse)));
        }

        /// <summary>
        /// Get battle passes Get active battle passes for the app
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>List&lt;BattlePass&gt;</returns>
        public List<BattlePass> GetActiveBattlePasses (string appId, string language = null)
        {
             ApiResponse<List<BattlePass>> localVarResponse = GetActiveBattlePassesWithHttpInfo(appId, language);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get battle passes Get active battle passes for the app
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>ApiResponse of List&lt;BattlePass&gt;</returns>
        public ApiResponse< List<BattlePass> > GetActiveBattlePassesWithHttpInfo (string appId, string language = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling BattlePassesApi->GetActiveBattlePasses");

            var localVarPath = "/api/v1/battle-passes/{appId}/active";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (language != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "language", language)); // query parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (oAuthNoScopes) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetActiveBattlePasses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BattlePass>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<BattlePass>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BattlePass>)));
        }

        /// <summary>
        /// Get battle passes Get active battle passes for the app
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Task of List&lt;BattlePass&gt;</returns>
        public async System.Threading.Tasks.Task<List<BattlePass>> GetActiveBattlePassesAsync (string appId, string language = null)
        {
             ApiResponse<List<BattlePass>> localVarResponse = await GetActiveBattlePassesAsyncWithHttpInfo(appId, language);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get battle passes Get active battle passes for the app
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;BattlePass&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<BattlePass>>> GetActiveBattlePassesAsyncWithHttpInfo (string appId, string language = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling BattlePassesApi->GetActiveBattlePasses");

            var localVarPath = "/api/v1/battle-passes/{appId}/active";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (language != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "language", language)); // query parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (oAuthNoScopes) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetActiveBattlePasses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BattlePass>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<BattlePass>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BattlePass>)));
        }

        /// <summary>
        /// Get battle pass levels for an app (from all battle passes) Get all battle pass levels for an app
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>List&lt;BattlePassLevel&gt;</returns>
        public List<BattlePassLevel> GetAllBattlePassLevels (string appId, string language = null)
        {
             ApiResponse<List<BattlePassLevel>> localVarResponse = GetAllBattlePassLevelsWithHttpInfo(appId, language);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get battle pass levels for an app (from all battle passes) Get all battle pass levels for an app
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>ApiResponse of List&lt;BattlePassLevel&gt;</returns>
        public ApiResponse< List<BattlePassLevel> > GetAllBattlePassLevelsWithHttpInfo (string appId, string language = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling BattlePassesApi->GetAllBattlePassLevels");

            var localVarPath = "/api/v1/battle-pass-levels/{appId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (language != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "language", language)); // query parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (oAuthNoScopes) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllBattlePassLevels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BattlePassLevel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<BattlePassLevel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BattlePassLevel>)));
        }

        /// <summary>
        /// Get battle pass levels for an app (from all battle passes) Get all battle pass levels for an app
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Task of List&lt;BattlePassLevel&gt;</returns>
        public async System.Threading.Tasks.Task<List<BattlePassLevel>> GetAllBattlePassLevelsAsync (string appId, string language = null)
        {
             ApiResponse<List<BattlePassLevel>> localVarResponse = await GetAllBattlePassLevelsAsyncWithHttpInfo(appId, language);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get battle pass levels for an app (from all battle passes) Get all battle pass levels for an app
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;BattlePassLevel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<BattlePassLevel>>> GetAllBattlePassLevelsAsyncWithHttpInfo (string appId, string language = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling BattlePassesApi->GetAllBattlePassLevels");

            var localVarPath = "/api/v1/battle-pass-levels/{appId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (language != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "language", language)); // query parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (oAuthNoScopes) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllBattlePassLevels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BattlePassLevel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<BattlePassLevel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BattlePassLevel>)));
        }

        /// <summary>
        /// Get battle pass by id Get battle pass for the product with id
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="battlePassId">The id of the battle pass. It’s the same as in battle_pass_id you received in earlier requests (i.e. getting all active battle passes for a product).</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>BattlePass</returns>
        public BattlePass GetBattlePass (string appId, string battlePassId, string language = null)
        {
             ApiResponse<BattlePass> localVarResponse = GetBattlePassWithHttpInfo(appId, battlePassId, language);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get battle pass by id Get battle pass for the product with id
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="battlePassId">The id of the battle pass. It’s the same as in battle_pass_id you received in earlier requests (i.e. getting all active battle passes for a product).</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>ApiResponse of BattlePass</returns>
        public ApiResponse< BattlePass > GetBattlePassWithHttpInfo (string appId, string battlePassId, string language = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling BattlePassesApi->GetBattlePass");
            // verify the required parameter 'battlePassId' is set
            if (battlePassId == null)
                throw new ApiException(400, "Missing required parameter 'battlePassId' when calling BattlePassesApi->GetBattlePass");

            var localVarPath = "/api/v1/battle-passes/{appId}/single/{battlePassId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (battlePassId != null) localVarPathParams.Add("battlePassId", this.Configuration.ApiClient.ParameterToString(battlePassId)); // path parameter
            if (language != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "language", language)); // query parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (oAuthNoScopes) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBattlePass", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BattlePass>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BattlePass) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BattlePass)));
        }

        /// <summary>
        /// Get battle pass by id Get battle pass for the product with id
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="battlePassId">The id of the battle pass. It’s the same as in battle_pass_id you received in earlier requests (i.e. getting all active battle passes for a product).</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Task of BattlePass</returns>
        public async System.Threading.Tasks.Task<BattlePass> GetBattlePassAsync (string appId, string battlePassId, string language = null)
        {
             ApiResponse<BattlePass> localVarResponse = await GetBattlePassAsyncWithHttpInfo(appId, battlePassId, language);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get battle pass by id Get battle pass for the product with id
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="battlePassId">The id of the battle pass. It’s the same as in battle_pass_id you received in earlier requests (i.e. getting all active battle passes for a product).</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Task of ApiResponse (BattlePass)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BattlePass>> GetBattlePassAsyncWithHttpInfo (string appId, string battlePassId, string language = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling BattlePassesApi->GetBattlePass");
            // verify the required parameter 'battlePassId' is set
            if (battlePassId == null)
                throw new ApiException(400, "Missing required parameter 'battlePassId' when calling BattlePassesApi->GetBattlePass");

            var localVarPath = "/api/v1/battle-passes/{appId}/single/{battlePassId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (battlePassId != null) localVarPathParams.Add("battlePassId", this.Configuration.ApiClient.ParameterToString(battlePassId)); // path parameter
            if (language != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "language", language)); // query parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (oAuthNoScopes) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBattlePass", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BattlePass>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BattlePass) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BattlePass)));
        }

        /// <summary>
        /// Get battle pass levels for a battle pass Get battle pass levels for a battle pass
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="battlePassId">The id of the battle pass. It’s the same as in battle_pass_id you received in earlier requests (i.e. getting all active battle passes for a product).</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>List&lt;BattlePassLevel&gt;</returns>
        public List<BattlePassLevel> GetBattlePassLevels (string appId, string battlePassId, string language = null)
        {
             ApiResponse<List<BattlePassLevel>> localVarResponse = GetBattlePassLevelsWithHttpInfo(appId, battlePassId, language);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get battle pass levels for a battle pass Get battle pass levels for a battle pass
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="battlePassId">The id of the battle pass. It’s the same as in battle_pass_id you received in earlier requests (i.e. getting all active battle passes for a product).</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>ApiResponse of List&lt;BattlePassLevel&gt;</returns>
        public ApiResponse< List<BattlePassLevel> > GetBattlePassLevelsWithHttpInfo (string appId, string battlePassId, string language = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling BattlePassesApi->GetBattlePassLevels");
            // verify the required parameter 'battlePassId' is set
            if (battlePassId == null)
                throw new ApiException(400, "Missing required parameter 'battlePassId' when calling BattlePassesApi->GetBattlePassLevels");

            var localVarPath = "/api/v1/battle-pass-levels/{appId}/{battlePassId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (battlePassId != null) localVarPathParams.Add("battlePassId", this.Configuration.ApiClient.ParameterToString(battlePassId)); // path parameter
            if (language != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "language", language)); // query parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (oAuthNoScopes) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBattlePassLevels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BattlePassLevel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<BattlePassLevel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BattlePassLevel>)));
        }

        /// <summary>
        /// Get battle pass levels for a battle pass Get battle pass levels for a battle pass
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="battlePassId">The id of the battle pass. It’s the same as in battle_pass_id you received in earlier requests (i.e. getting all active battle passes for a product).</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Task of List&lt;BattlePassLevel&gt;</returns>
        public async System.Threading.Tasks.Task<List<BattlePassLevel>> GetBattlePassLevelsAsync (string appId, string battlePassId, string language = null)
        {
             ApiResponse<List<BattlePassLevel>> localVarResponse = await GetBattlePassLevelsAsyncWithHttpInfo(appId, battlePassId, language);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get battle pass levels for a battle pass Get battle pass levels for a battle pass
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="battlePassId">The id of the battle pass. It’s the same as in battle_pass_id you received in earlier requests (i.e. getting all active battle passes for a product).</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;BattlePassLevel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<BattlePassLevel>>> GetBattlePassLevelsAsyncWithHttpInfo (string appId, string battlePassId, string language = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling BattlePassesApi->GetBattlePassLevels");
            // verify the required parameter 'battlePassId' is set
            if (battlePassId == null)
                throw new ApiException(400, "Missing required parameter 'battlePassId' when calling BattlePassesApi->GetBattlePassLevels");

            var localVarPath = "/api/v1/battle-pass-levels/{appId}/{battlePassId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (battlePassId != null) localVarPathParams.Add("battlePassId", this.Configuration.ApiClient.ParameterToString(battlePassId)); // path parameter
            if (language != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "language", language)); // query parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (oAuthNoScopes) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBattlePassLevels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BattlePassLevel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<BattlePassLevel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BattlePassLevel>)));
        }

        /// <summary>
        /// Get battle passes Get battle passes for the product
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>List&lt;BattlePass&gt;</returns>
        public List<BattlePass> GetBattlePasses (string appId, string language = null)
        {
             ApiResponse<List<BattlePass>> localVarResponse = GetBattlePassesWithHttpInfo(appId, language);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get battle passes Get battle passes for the product
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>ApiResponse of List&lt;BattlePass&gt;</returns>
        public ApiResponse< List<BattlePass> > GetBattlePassesWithHttpInfo (string appId, string language = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling BattlePassesApi->GetBattlePasses");

            var localVarPath = "/api/v1/battle-passes/{appId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (language != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "language", language)); // query parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (oAuthNoScopes) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBattlePasses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BattlePass>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<BattlePass>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BattlePass>)));
        }

        /// <summary>
        /// Get battle passes Get battle passes for the product
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Task of List&lt;BattlePass&gt;</returns>
        public async System.Threading.Tasks.Task<List<BattlePass>> GetBattlePassesAsync (string appId, string language = null)
        {
             ApiResponse<List<BattlePass>> localVarResponse = await GetBattlePassesAsyncWithHttpInfo(appId, language);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get battle passes Get battle passes for the product
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;BattlePass&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<BattlePass>>> GetBattlePassesAsyncWithHttpInfo (string appId, string language = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling BattlePassesApi->GetBattlePasses");

            var localVarPath = "/api/v1/battle-passes/{appId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (language != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "language", language)); // query parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (oAuthNoScopes) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBattlePasses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BattlePass>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<BattlePass>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BattlePass>)));
        }

        /// <summary>
        /// Get battle passes unlocked by the user Get unlocked battle passes for the user encoded in the access token
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>List&lt;BattlePass&gt;</returns>
        public List<BattlePass> GetUnlockedBattlePasses (string appId, string language = null)
        {
             ApiResponse<List<BattlePass>> localVarResponse = GetUnlockedBattlePassesWithHttpInfo(appId, language);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get battle passes unlocked by the user Get unlocked battle passes for the user encoded in the access token
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>ApiResponse of List&lt;BattlePass&gt;</returns>
        public ApiResponse< List<BattlePass> > GetUnlockedBattlePassesWithHttpInfo (string appId, string language = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling BattlePassesApi->GetUnlockedBattlePasses");

            var localVarPath = "/api/v1/battle-passes/{appId}/unlocked";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (language != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "language", language)); // query parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (oAuthNoScopes) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUnlockedBattlePasses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BattlePass>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<BattlePass>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BattlePass>)));
        }

        /// <summary>
        /// Get battle passes unlocked by the user Get unlocked battle passes for the user encoded in the access token
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Task of List&lt;BattlePass&gt;</returns>
        public async System.Threading.Tasks.Task<List<BattlePass>> GetUnlockedBattlePassesAsync (string appId, string language = null)
        {
             ApiResponse<List<BattlePass>> localVarResponse = await GetUnlockedBattlePassesAsyncWithHttpInfo(appId, language);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get battle passes unlocked by the user Get unlocked battle passes for the user encoded in the access token
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;BattlePass&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<BattlePass>>> GetUnlockedBattlePassesAsyncWithHttpInfo (string appId, string language = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling BattlePassesApi->GetUnlockedBattlePasses");

            var localVarPath = "/api/v1/battle-passes/{appId}/unlocked";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (language != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "language", language)); // query parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (oAuthNoScopes) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUnlockedBattlePasses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BattlePass>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<BattlePass>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BattlePass>)));
        }

        /// <summary>
        /// Unlock the battle pass for the user specified in the access token Unlock the battle pass for a user
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="battlePassId">The id of the battle pass. It’s the same as in battle_pass_id you received in earlier requests (i.e. getting all active battle passes for a product).</param>
        /// <param name="body">Provide purchase info for the battle pass (optional)</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>BattlePassUnlockInfo</returns>
        public BattlePassUnlockInfo UnlockBattlePass (string appId, string battlePassId, BattlePassUnlockPayload body = null, string language = null)
        {
             ApiResponse<BattlePassUnlockInfo> localVarResponse = UnlockBattlePassWithHttpInfo(appId, battlePassId, body, language);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Unlock the battle pass for the user specified in the access token Unlock the battle pass for a user
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="battlePassId">The id of the battle pass. It’s the same as in battle_pass_id you received in earlier requests (i.e. getting all active battle passes for a product).</param>
        /// <param name="body">Provide purchase info for the battle pass (optional)</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>ApiResponse of BattlePassUnlockInfo</returns>
        public ApiResponse< BattlePassUnlockInfo > UnlockBattlePassWithHttpInfo (string appId, string battlePassId, BattlePassUnlockPayload body = null, string language = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling BattlePassesApi->UnlockBattlePass");
            // verify the required parameter 'battlePassId' is set
            if (battlePassId == null)
                throw new ApiException(400, "Missing required parameter 'battlePassId' when calling BattlePassesApi->UnlockBattlePass");

            var localVarPath = "/api/v1/battle-passes/{appId}/unlock/{battlePassId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (battlePassId != null) localVarPathParams.Add("battlePassId", this.Configuration.ApiClient.ParameterToString(battlePassId)); // path parameter
            if (language != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "language", language)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (oAuthNoScopes) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnlockBattlePass", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BattlePassUnlockInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BattlePassUnlockInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BattlePassUnlockInfo)));
        }

        /// <summary>
        /// Unlock the battle pass for the user specified in the access token Unlock the battle pass for a user
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="battlePassId">The id of the battle pass. It’s the same as in battle_pass_id you received in earlier requests (i.e. getting all active battle passes for a product).</param>
        /// <param name="body">Provide purchase info for the battle pass (optional)</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Task of BattlePassUnlockInfo</returns>
        public async System.Threading.Tasks.Task<BattlePassUnlockInfo> UnlockBattlePassAsync (string appId, string battlePassId, BattlePassUnlockPayload body = null, string language = null)
        {
             ApiResponse<BattlePassUnlockInfo> localVarResponse = await UnlockBattlePassAsyncWithHttpInfo(appId, battlePassId, body, language);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Unlock the battle pass for the user specified in the access token Unlock the battle pass for a user
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="battlePassId">The id of the battle pass. It’s the same as in battle_pass_id you received in earlier requests (i.e. getting all active battle passes for a product).</param>
        /// <param name="body">Provide purchase info for the battle pass (optional)</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Task of ApiResponse (BattlePassUnlockInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BattlePassUnlockInfo>> UnlockBattlePassAsyncWithHttpInfo (string appId, string battlePassId, BattlePassUnlockPayload body = null, string language = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling BattlePassesApi->UnlockBattlePass");
            // verify the required parameter 'battlePassId' is set
            if (battlePassId == null)
                throw new ApiException(400, "Missing required parameter 'battlePassId' when calling BattlePassesApi->UnlockBattlePass");

            var localVarPath = "/api/v1/battle-passes/{appId}/unlock/{battlePassId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (battlePassId != null) localVarPathParams.Add("battlePassId", this.Configuration.ApiClient.ParameterToString(battlePassId)); // path parameter
            if (language != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "language", language)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (oAuthNoScopes) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnlockBattlePass", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BattlePassUnlockInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BattlePassUnlockInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BattlePassUnlockInfo)));
        }

    }
}
