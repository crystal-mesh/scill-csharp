/* 
 * SCILL API
 *
 * SCILL gives you the tools to activate, retain and grow your user base in your app or game by bringing you features well known in the gaming industry: Gamification. We take care of the services and technology involved so you can focus on your game and content.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@scillgame.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using SCILL.Client;
using SCILL.Api;
using SCILL.Model;

namespace SCILL.Test
{
    /// <summary>
    ///  Class for testing LeaderboardsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class LeaderboardsApiTests
    {
        private LeaderboardsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new LeaderboardsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of LeaderboardsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' LeaderboardsApi
            //Assert.IsInstanceOfType(typeof(LeaderboardsApi), instance, "instance is a LeaderboardsApi");
        }

        /// <summary>
        /// Test GetLeaderboard
        /// </summary>
        [Test]
        public void GetLeaderboardTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string leaderboardId = null;
            //int? currentPage = null;
            //int? pageSize = null;
            //string language = null;
            //var response = instance.GetLeaderboard(leaderboardId, currentPage, pageSize, language);
            //Assert.IsInstanceOf<Leaderboard> (response, "response is Leaderboard");
        }
        /// <summary>
        /// Test GetLeaderboardRanking
        /// </summary>
        [Test]
        public void GetLeaderboardRankingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string memberType = null;
            //string memberId = null;
            //string leaderboardId = null;
            //string language = null;
            //var response = instance.GetLeaderboardRanking(memberType, memberId, leaderboardId, language);
            //Assert.IsInstanceOf<List<LeaderboardMemberRanking>> (response, "response is List<LeaderboardMemberRanking>");
        }
        /// <summary>
        /// Test GetLeaderboardRankings
        /// </summary>
        [Test]
        public void GetLeaderboardRankingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string memberType = null;
            //string memberId = null;
            //string language = null;
            //var response = instance.GetLeaderboardRankings(memberType, memberId, language);
            //Assert.IsInstanceOf<List<LeaderboardMemberRanking>> (response, "response is List<LeaderboardMemberRanking>");
        }
        /// <summary>
        /// Test GetLeaderboards
        /// </summary>
        [Test]
        public void GetLeaderboardsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? currentPage = null;
            //int? pageSize = null;
            //string language = null;
            //var response = instance.GetLeaderboards(currentPage, pageSize, language);
            //Assert.IsInstanceOf<List<Leaderboard>> (response, "response is List<Leaderboard>");
        }
    }

}
