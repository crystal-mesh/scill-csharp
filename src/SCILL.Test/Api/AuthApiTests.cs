/* 
 * SCILL API
 *
 * SCILL gives you the tools to activate, retain and grow your user base in your app or game by bringing you features well known in the gaming industry: Gamification. We take care of the services and technology involved so you can focus on your game and content.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@scillgame.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using SCILL.Client;
using SCILL.Api;
using SCILL.Model;

namespace SCILL.Test
{
    /// <summary>
    ///  Class for testing AuthApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class AuthApiTests
    {
        private AuthApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new AuthApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of AuthApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' AuthApi
            //Assert.IsInstanceOfType(typeof(AuthApi), instance, "instance is a AuthApi");
        }

        /// <summary>
        /// Test GenerateAccessToken
        /// </summary>
        [Test]
        public void GenerateAccessTokenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ForeignUserIdentifier body = null;
            //var response = instance.GenerateAccessToken(body);
            //Assert.IsInstanceOf<AccessToken> (response, "response is AccessToken");
        }
        /// <summary>
        /// Test GetUserBattlePassNotificationTopic
        /// </summary>
        [Test]
        public void GetUserBattlePassNotificationTopicTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string battlePassId = null;
            //var response = instance.GetUserBattlePassNotificationTopic(battlePassId);
            //Assert.IsInstanceOf<NotificationTopic> (response, "response is NotificationTopic");
        }
        /// <summary>
        /// Test GetUserChallengeNotificationTopic
        /// </summary>
        [Test]
        public void GetUserChallengeNotificationTopicTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string challengeId = null;
            //var response = instance.GetUserChallengeNotificationTopic(challengeId);
            //Assert.IsInstanceOf<NotificationTopic> (response, "response is NotificationTopic");
        }
        /// <summary>
        /// Test GetUserChallengesNotificationTopic
        /// </summary>
        [Test]
        public void GetUserChallengesNotificationTopicTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetUserChallengesNotificationTopic();
            //Assert.IsInstanceOf<NotificationTopic> (response, "response is NotificationTopic");
        }
        /// <summary>
        /// Test GetUserInfo
        /// </summary>
        [Test]
        public void GetUserInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetUserInfo();
            //Assert.IsInstanceOf<UserInfo> (response, "response is UserInfo");
        }
        /// <summary>
        /// Test SetUserInfo
        /// </summary>
        [Test]
        public void SetUserInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UserInfo body = null;
            //var response = instance.SetUserInfo(body);
            //Assert.IsInstanceOf<UserInfo> (response, "response is UserInfo");
        }
    }

}
